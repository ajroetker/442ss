12
2 3 1
3 0 4 2
2 1 5
3 0 4 6
4 1 3 5 7
3 2 4 8
3 3 7 9
4 4 6 8 10
3 5 7 11
2 6 10
3 7 9 11
2 8 10
#include <stdio.h>
#include <stdlib.h>
#include "stack.h"
#include "queue.h"
#include "node.h"

//
// MATH 442 : graph
//
// Graph traversal program.
//

// readGraph
//
// Reads a text file that describes the
// edge adjacency structure of a graph.
//
// The format is
//
//    (# of vertices)
//    (#neighbors of 0) n1 n2 n3 ...
//    (#neighbors of 1) ...
//    ...
//
// The vertices are named 0, 1, 2, ... n-1.
//
// For an example, consider the following
// 3x4 "grid graph"
//
//   ( 0) -- ( 3) -- ( 6) -- ( 9)
//     |       |       |       |
//   ( 1) -- ( 4) -- ( 7) -- (10)
//     |       |       |       |
//   ( 2) -- ( 5) -- ( 8) -- (11)
//
// It would be given by the file
//
// 12
// 2 3 1
// 3 0 4 2
// 2 1 5
// 3 0 4 6
// 4 1 3 5 7
// 3 2 4 8
// 3 3 7 9
// 4 4 6 8 10
// 3 5 7 11
// 2 6 10
// 3 7 9 11
// 2 8 10
//
// For example, in the second line we have
// "2 3 1" because vertex 0 has two neighbors
// vertex 3 and vertex 1.
//
// This function sets the contents of "np" to
// be the number of vertices, and builds an 
// array of edge lists.  Each edge list g[i] 
// an array of integers (the neighbors of i)
// terminated with -1.
//
// The edge list is returned by readGraph.
//
int **readGraph(FILE *f, int *np) {
  int **graph;
  int e,v;
  int i,j;

  // read the number of vertices
  fscanf(f,"%d\n",np);

  // create the array of edges
  graph = (int **)malloc((*np)*sizeof(int *));

  // read each adjacency list
  for (i = 0; i < (*np); i++) {
    // size of the list
    fscanf(f,"%d",&e);
    graph[i] = (int *)malloc((e+1)*sizeof(int));
    // endpoints of edges
    for (j = 0; j < e; j++) {
      fscanf(f,"%d",&graph[i][j]);
    }
    graph[i][j] = -1;
  }

  return graph;
}

// bfs
//
// Performs a queue-based breadth-first search of the
// graph provided by the adjacency lists in G.  The
// initial seed vertex is given by "seed".
//
// Returns the distances from the seed verex
// of the BFS tree as an array "dist",
// where dist[i] gives the distance of seed to vertex i.
// These are only valid when dist[i] is non-negative.
// dist[i]=(-1) means that i is not
// reachable from seed.  dist[seed] = (0).
//
int *bfs(int seed, int **G, int n) {
  int u,v,a;
  int *dist;
  queue *Q;

  // clear "from" marks
  dist = (int *)malloc(n * sizeof(int));
  for (v = 0; v < n; v++) {
    dist[v] = -1;
  }

  // initialize DFS stack with seed vertex s
  Q = newQueue();
  enqueue(seed,Q);
  dist[seed] = 0;
  /*
   *  for (v = 0; v < n; v++) {
   *  printf("f[%d]:%d\n",v,dist[v]);
   *  }
   */
  // search until stack is empty
  while (!isEmptyQueue(Q)) {
    // grab next vertex to explore from
    u = dequeue(Q);

    // for each of u's neighbors v
    for (a=0; G[u][a] != -1; a++) {

      v = G[u][a];
      //printf("%d>%d\n",u,v);
      // if v is not on the queue, mark its "dist" as dist[u] + 1
      if (dist[v] == -1) {
        //printf("%d -> %d\n",u,v);
        dist[v] = dist[u] + 1;
        enqueue(v,Q);
        outputQueue(Q);
      }
    }
  }
  return dist;
}

// dfs
//
// Performs a stack-based depth-first search of the
// graph provided by the adjacency lists in G.  The
// initial seed vertex is given by s.  
//
// Returns the edges of the DFS tree as an array
// "from", where (i,from[i]) gives each edge.  These
// are only valid when from[i] is non-negative and not 
// equal to i.  from[i]=(-1) means that i is not
// reachable from s.  from[s] = s.
//
int *dfs(int s, int **G, int n) {
  int u,v,a;
  int *from;
  stack *S;

  // clear "from" marks
  from = (int *)malloc(n * sizeof(int));
  for (v = 0; v < n; v++) {
    from[v] = -1;
  }

  // initialize DFS stack with seed vertex s
  S = newStack(n);
  push(s,S);
  from[s] = s;

//  for (v = 0; v < n; v++) {
//    printf("f[%d]:%d\n",v,from[v]);
//  }

  // search until stack is empty
  while (!isEmpty(S)) {
    // grab next vertex to explore from
    u = pop(S);

    // for each of u's neighbors v
    for (a=0; G[u][a] != -1; a++) {

      v = G[u][a];
//      printf("%d>%d\n",u,v);
      // if v is not on the stack, mark its "from" as u
      if (from[v] == -1) {
//        printf("%d -> %d\n",u,v);
        from[v] = u;
        push(v,S);
        output(S);
      }
    }
  }
  return from;
}

// usage
//
// Directs the user of this program.
void usage(char *cmd, char *fname) {
  if (fname) {
    fprintf(stderr,"Error! Unable to open file named '%s.'\n",fname);
  } else {
    fprintf(stderr,"Error! Missing input file argument.\n");
  }
  fprintf(stderr,"usage: %s <graph file>\n",cmd);
  fprintf(stderr,"\twhere <graph file> is the name of a text file\n");
  fprintf(stderr,"\tdescribing the adjacency structure of a graph.\n");
}

//
// graph
//
// Program reads a text file that describes a graph.  It
// then performs a depth-first search of the graph from 
// the graph's 0 vertex, and reports the edges in the 
// DFS tree.
//
int main(int argc, char **argv) {
  FILE *gf;
  int **G, n, i, *pred, *other;
  int some = 0;

  if (argc < 2) {

    usage(argv[0],NULL);
    return -1;

  } else {

    gf = fopen(argv[1],"r");
    if (gf == NULL) {
      usage(argv[0],argv[1]);
      return -1;
    }

    // read the graph file
    G = readGraph(gf,&n);

    // perform the search
    pred = dfs(0,G,n);

    // report the DFS tree
    printf("{");
    for (i=1; i<n; i++) {
      if (pred[i] >= 0) {
        if (some) {
          printf(",");
        }
        printf("(%d,%d)",i,pred[i]);
        some = 1;
      }
    }
    printf("}\n");
    some = 0;
    // perform the search
    pred = bfs(0,G,n);

    // report the BFS frontiers
    printf("{");
    for (i=1; i<n; i++) {
      if (pred[i] >= 0) {
        if (some) {
          printf(",");
        }
        printf("(%d,%d)",i,pred[i]);
        some = 1;
      }
    }
    printf("}\n");

    return 0;
  }
}
#ifndef _NODE_H
#define _NODE_H

typedef struct _node {
    int data;
    struct _node *next;
} node;

#endif
#include "node.h"
#ifndef _QUEUE_H
#define _QUEUE_H

typedef struct _queue {
    node *head;
    node *tail;
    int size;
} queue;

queue *newQueue();
int isEmptyQueue(queue *Q);
int sizeQueue(queue *Q);
void enqueue(int x, queue *Q);
int dequeue(queue *Q);
int front(queue *Q);
void outputQueue(queue *Q);

#endif
#include <stdio.h>
#include <stdlib.h>
#include "queue.h"
#include "node.h"

// newQueue
//
// Creates and returns a new queue with the
// given capacity. Its representation is an
// array of integers, potential elements to
// be stored in the stack.  The array item
// at -1 holds the number of elements stored
// on the queue, initially 0.
//
queue *newQueue() {
  queue *Q = (queue *)malloc(sizeof(queue));
  Q->tail = NULL;
  Q->head = NULL;
  Q->size = 0;
  return Q;
}

// isEmpty
//
// Checks whether the stack is empty.
int isEmptyQueue(queue *Q) {
  return (sizeQueue(Q) == 0);
}

// size
//
// Returns the number of elements on the stack.
int sizeQueue(queue *Q) {
  return Q->size;
}

// increase, decrease
//
// Two stack size helper functions.
void decreaseQ(queue *Q) {
  Q->size--;
}
void increaseQ(queue *Q) {
  Q->size++;
}

// enqueue
//
// Pushes x onto stack S.
//
void enqueue(int x, queue* Q) {
  node *n = (node *)malloc(sizeof(node));
  n->data = x;
  n->next = NULL;
  if (Q->head == NULL) {
    Q->head = n;
  }
  else {
    Q->tail->next = n;
  }
  Q->tail = n;
  increaseQ(Q);
}


// dequeue
//
// Pops top value off of stack S,
// returns it.
//
int dequeue(queue *Q) {
  decreaseQ(Q);
  int x = Q->head->data;
  node *n = Q->head;
  Q->head = Q->head->next;
  free(n);
  return x;
}

// first
//
// Returns top value of stack S.
//
int front(queue *Q) {
  if (Q->head != NULL) {
    return Q->head->data;
  }
}

void outputQueue(queue *Q) {
  int i;
  if (isEmpty(Q)) {
    printf("[ ]");
  } else {
    node *n = Q->head;
    printf("[(%d)", n->data);
    n = n->next;
    while (n != NULL) {
      printf(" %d",n->data);
      n = n->next;
    }
    printf("]\n");
  }
}
#ifndef _STACK_H
#define _STACK_H

typedef struct _stack {
    int size;
    int capacity;
    int *elements;
} stack;

stack *newStack(int capacity);
int isEmpty(stack *S);
int size(stack *S);
void push(int x, stack *S);
int pop(stack *S);
int top(stack *S);
void output(stack *S);

#endif
#include <stdio.h>
#include <stdlib.h>
#include "stack.h"

// newStack
//
// Creates and returns a new stack with the 
// given capacity. Its representation is an
// array of integers, potential elements to
// be stored in the stack.  The array item 
// at -1 holds the number of elements stored
// on the stack, initially 0.
//
stack *newStack(int capacity) {
  stack *S = (stack *)malloc(sizeof(stack));
  S->capacity = capacity;
  S->size = 0;
  S->elements = (int *)malloc((capacity)*sizeof(int));
  return S;  // start at first element, 0th holds size
}

// isEmpty
//
// Checks whether the stack is empty.
int isEmpty(stack *S) {
  return (size(S) == 0);
}

// size
//
// Returns the number of elements on the stack.
int size(stack *S) {
  return S->size;
}

// increase, decrease
//
// Two stack size helper functions.
void decrease(stack *S) {
  S->size--;
}
void increase(stack *S) {
  S->size++;
}

// push
//
// Pushes x onto stack S.
//
void push(int x, stack *S) {
  S->elements[size(S)] = x;
  increase(S);
}


// pop
//
// Pops top value off of stack S,
// returns it.
//
int pop(stack *S) {
  decrease(S);
  return S->elements[size(S)];
}

// top
//
// Returns top value of stack S.
//
int top(stack *S) {
  return S->elements[size(S)-1];
}

void output(stack *S) {
  int i;
  if (isEmpty(S)) {
    printf("[ ]");
  } else {
    printf("[");
    for (i=0; i<size(S)-1; i++) {
      printf("%d ",S->elements[i]);
    }
    printf("(%d)]\n",top(S));
  }
}
[(3)]
[3 (1)]
[3 (4)]
[3 4 (2)]
[3 4 (5)]
[3 4 (8)]
[3 4 (7)]
[3 4 7 (11)]
[3 4 7 (10)]
[3 4 7 (9)]
[3 4 7 (6)]
{(1,0),(2,1),(3,0),(4,1),(5,2),(6,9),(7,8),(8,5),(9,10),(10,11),(11,8)}
[(3)]
[(3) 1]
[(1) 4]
[(1) 4 6]
[(4) 6 2]
[(6) 2 5]
[(6) 2 5 7]
[(2) 5 7 9]
[(7) 9 8]
[(9) 8 10]
[(10) 11]
{(1,1),(2,2),(3,1),(4,2),(5,3),(6,2),(7,3),(8,4),(9,3),(10,4),(11,5)}
