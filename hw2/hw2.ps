%!PS-Adobe-3.0
%%BoundingBox: 24 24 571 818
%%Title: Enscript Output
%%For: Andrew Roetker
%%Creator: GNU Enscript 1.6.6
%%CreationDate: Wed Sep 25 11:50:23 2013
%%Orientation: Landscape
%%Pages: (atend)
%%DocumentMedia: A4 595 842 0 () ()
%%DocumentNeededResources: (atend)
%%EndComments
%%BeginProlog
%%BeginResource: procset Enscript-Prolog 1.6 6
%
% Procedures.
%

/_S {	% save current state
  /_s save def
} def
/_R {	% restore from saved state
  _s restore
} def

/S {	% showpage protecting gstate
  gsave
  showpage
  grestore
} bind def

/MF {	% fontname newfontname -> -	make a new encoded font
  /newfontname exch def
  /fontname exch def

  /fontdict fontname findfont def
  /newfont fontdict maxlength dict def

  fontdict {
    exch
    dup /FID eq {
      % skip FID pair
      pop pop
    } {
      % copy to the new font dictionary
      exch newfont 3 1 roll put
    } ifelse
  } forall

  newfont /FontName newfontname put

  % insert only valid encoding vectors
  encoding_vector length 256 eq {
    newfont /Encoding encoding_vector put
  } if

  newfontname newfont definefont pop
} def

/MF_PS { % fontname newfontname -> -	make a new font preserving its enc
  /newfontname exch def
  /fontname exch def

  /fontdict fontname findfont def
  /newfont fontdict maxlength dict def

  fontdict {
    exch
    dup /FID eq {
      % skip FID pair
      pop pop
    } {
      % copy to the new font dictionary
      exch newfont 3 1 roll put
    } ifelse
  } forall

  newfont /FontName newfontname put

  newfontname newfont definefont pop
} def

/SF { % fontname width height -> -	set a new font
  /height exch def
  /width exch def

  findfont
  [width 0 0 height 0 0] makefont setfont
} def

/SUF { % fontname width height -> -	set a new user font
  /height exch def
  /width exch def

  /F-gs-user-font MF
  /F-gs-user-font width height SF
} def

/SUF_PS { % fontname width height -> -	set a new user font preserving its enc
  /height exch def
  /width exch def

  /F-gs-user-font MF_PS
  /F-gs-user-font width height SF
} def

/M {moveto} bind def
/s {show} bind def

/Box {	% x y w h -> -			define box path
  /d_h exch def /d_w exch def /d_y exch def /d_x exch def
  d_x d_y  moveto
  d_w 0 rlineto
  0 d_h rlineto
  d_w neg 0 rlineto
  closepath
} def

/bgs {	% x y height blskip gray str -> -	show string with bg color
  /str exch def
  /gray exch def
  /blskip exch def
  /height exch def
  /y exch def
  /x exch def

  gsave
    x y blskip sub str stringwidth pop height Box
    gray setgray
    fill
  grestore
  x y M str s
} def

/bgcs { % x y height blskip red green blue str -> -  show string with bg color
  /str exch def
  /blue exch def
  /green exch def
  /red exch def
  /blskip exch def
  /height exch def
  /y exch def
  /x exch def

  gsave
    x y blskip sub str stringwidth pop height Box
    red green blue setrgbcolor
    fill
  grestore
  x y M str s
} def

% Highlight bars.
/highlight_bars {	% nlines lineheight output_y_margin gray -> -
  gsave
    setgray
    /ymarg exch def
    /lineheight exch def
    /nlines exch def

    % This 2 is just a magic number to sync highlight lines to text.
    0 d_header_y ymarg sub 2 sub translate

    /cw d_output_w cols div def
    /nrows d_output_h ymarg 2 mul sub lineheight div cvi def

    % for each column
    0 1 cols 1 sub {
      cw mul /xp exch def

      % for each rows
      0 1 nrows 1 sub {
        /rn exch def
        rn lineheight mul neg /yp exch def
        rn nlines idiv 2 mod 0 eq {
	  % Draw highlight bar.  4 is just a magic indentation.
	  xp 4 add yp cw 8 sub lineheight neg Box fill
	} if
      } for
    } for

  grestore
} def

% Line highlight bar.
/line_highlight {	% x y width height gray -> -
  gsave
    /gray exch def
    Box gray setgray fill
  grestore
} def

% Column separator lines.
/column_lines {
  gsave
    .1 setlinewidth
    0 d_footer_h translate
    /cw d_output_w cols div def
    1 1 cols 1 sub {
      cw mul 0 moveto
      0 d_output_h rlineto stroke
    } for
  grestore
} def

% Column borders.
/column_borders {
  gsave
    .1 setlinewidth
    0 d_footer_h moveto
    0 d_output_h rlineto
    d_output_w 0 rlineto
    0 d_output_h neg rlineto
    closepath stroke
  grestore
} def

% Do the actual underlay drawing
/draw_underlay {
  ul_style 0 eq {
    ul_str true charpath stroke
  } {
    ul_str show
  } ifelse
} def

% Underlay
/underlay {	% - -> -
  gsave
    0 d_page_h translate
    d_page_h neg d_page_w atan rotate

    ul_gray setgray
    ul_font setfont
    /dw d_page_h dup mul d_page_w dup mul add sqrt def
    ul_str stringwidth pop dw exch sub 2 div ul_h_ptsize -2 div moveto
    draw_underlay
  grestore
} def

/user_underlay {	% - -> -
  gsave
    ul_x ul_y translate
    ul_angle rotate
    ul_gray setgray
    ul_font setfont
    0 0 ul_h_ptsize 2 div sub moveto
    draw_underlay
  grestore
} def

% Page prefeed
/page_prefeed {		% bool -> -
  statusdict /prefeed known {
    statusdict exch /prefeed exch put
  } {
    pop
  } ifelse
} def

% Wrapped line markers
/wrapped_line_mark {	% x y charwith charheight type -> -
  /type exch def
  /h exch def
  /w exch def
  /y exch def
  /x exch def

  type 2 eq {
    % Black boxes (like TeX does)
    gsave
      0 setlinewidth
      x w 4 div add y M
      0 h rlineto w 2 div 0 rlineto 0 h neg rlineto
      closepath fill
    grestore
  } {
    type 3 eq {
      % Small arrows
      gsave
        .2 setlinewidth
        x w 2 div add y h 2 div add M
        w 4 div 0 rlineto
        x w 4 div add y lineto stroke

        x w 4 div add w 8 div add y h 4 div add M
        x w 4 div add y lineto
	w 4 div h 8 div rlineto stroke
      grestore
    } {
      % do nothing
    } ifelse
  } ifelse
} def

% EPSF import.

/BeginEPSF {
  /b4_Inc_state save def    		% Save state for cleanup
  /dict_count countdictstack def	% Count objects on dict stack
  /op_count count 1 sub def		% Count objects on operand stack
  userdict begin
  /showpage { } def
  0 setgray 0 setlinecap
  1 setlinewidth 0 setlinejoin
  10 setmiterlimit [ ] 0 setdash newpath
  /languagelevel where {
    pop languagelevel
    1 ne {
      false setstrokeadjust false setoverprint
    } if
  } if
} bind def

/EndEPSF {
  count op_count sub { pos } repeat	% Clean up stacks
  countdictstack dict_count sub { end } repeat
  b4_Inc_state restore
} bind def

% Check PostScript language level.
/languagelevel where {
  pop /gs_languagelevel languagelevel def
} {
  /gs_languagelevel 1 def
} ifelse
%%EndResource
%%BeginResource: procset Enscript-Encoding-88591 1.6 6
/encoding_vector [
/.notdef      	/.notdef      	/.notdef      	/.notdef      	
/.notdef      	/.notdef      	/.notdef      	/.notdef      	
/.notdef      	/.notdef      	/.notdef      	/.notdef      	
/.notdef      	/.notdef      	/.notdef      	/.notdef      	
/.notdef      	/.notdef      	/.notdef      	/.notdef      	
/.notdef      	/.notdef      	/.notdef      	/.notdef      	
/.notdef      	/.notdef      	/.notdef      	/.notdef      	
/.notdef      	/.notdef      	/.notdef      	/.notdef      	
/space        	/exclam       	/quotedbl     	/numbersign   	
/dollar       	/percent      	/ampersand    	/quoteright   	
/parenleft    	/parenright   	/asterisk     	/plus         	
/comma        	/hyphen       	/period       	/slash        	
/zero         	/one          	/two          	/three        	
/four         	/five         	/six          	/seven        	
/eight        	/nine         	/colon        	/semicolon    	
/less         	/equal        	/greater      	/question     	
/at           	/A            	/B            	/C            	
/D            	/E            	/F            	/G            	
/H            	/I            	/J            	/K            	
/L            	/M            	/N            	/O            	
/P            	/Q            	/R            	/S            	
/T            	/U            	/V            	/W            	
/X            	/Y            	/Z            	/bracketleft  	
/backslash    	/bracketright 	/asciicircum  	/underscore   	
/quoteleft    	/a            	/b            	/c            	
/d            	/e            	/f            	/g            	
/h            	/i            	/j            	/k            	
/l            	/m            	/n            	/o            	
/p            	/q            	/r            	/s            	
/t            	/u            	/v            	/w            	
/x            	/y            	/z            	/braceleft    	
/bar          	/braceright   	/tilde        	/.notdef      	
/.notdef      	/.notdef      	/.notdef      	/.notdef      	
/.notdef      	/.notdef      	/.notdef      	/.notdef      	
/.notdef      	/.notdef      	/.notdef      	/.notdef      	
/.notdef      	/.notdef      	/.notdef      	/.notdef      	
/.notdef      	/.notdef      	/.notdef      	/.notdef      	
/.notdef      	/.notdef      	/.notdef      	/.notdef      	
/.notdef      	/.notdef      	/.notdef      	/.notdef      	
/.notdef      	/.notdef      	/.notdef      	/.notdef      	
/space        	/exclamdown   	/cent         	/sterling     	
/currency     	/yen          	/brokenbar    	/section      	
/dieresis     	/copyright    	/ordfeminine  	/guillemotleft	
/logicalnot   	/hyphen       	/registered   	/macron       	
/degree       	/plusminus    	/twosuperior  	/threesuperior	
/acute        	/mu           	/paragraph    	/bullet       	
/cedilla      	/onesuperior  	/ordmasculine 	/guillemotright	
/onequarter   	/onehalf      	/threequarters	/questiondown 	
/Agrave       	/Aacute       	/Acircumflex  	/Atilde       	
/Adieresis    	/Aring        	/AE           	/Ccedilla     	
/Egrave       	/Eacute       	/Ecircumflex  	/Edieresis    	
/Igrave       	/Iacute       	/Icircumflex  	/Idieresis    	
/Eth          	/Ntilde       	/Ograve       	/Oacute       	
/Ocircumflex  	/Otilde       	/Odieresis    	/multiply     	
/Oslash       	/Ugrave       	/Uacute       	/Ucircumflex  	
/Udieresis    	/Yacute       	/Thorn        	/germandbls   	
/agrave       	/aacute       	/acircumflex  	/atilde       	
/adieresis    	/aring        	/ae           	/ccedilla     	
/egrave       	/eacute       	/ecircumflex  	/edieresis    	
/igrave       	/iacute       	/icircumflex  	/idieresis    	
/eth          	/ntilde       	/ograve       	/oacute       	
/ocircumflex  	/otilde       	/odieresis    	/divide       	
/oslash       	/ugrave       	/uacute       	/ucircumflex  	
/udieresis    	/yacute       	/thorn        	/ydieresis    	
] def
%%EndResource
%%EndProlog
%%BeginSetup
%%IncludeResource: font Courier-Bold
%%IncludeResource: font Courier
/HFpt_w 10 def
/HFpt_h 10 def
/Courier-Bold /HF-gs-font MF
/HF /HF-gs-font findfont [HFpt_w 0 0 HFpt_h 0 0] makefont def
/Courier /F-gs-font MF
/F-gs-font 10 10 SF
/#copies 1 def
% Pagedevice definitions:
gs_languagelevel 1 gt {
  <<
    /PageSize [595 842] 
  >> setpagedevice
} if
%%BeginResource: procset Enscript-Header-simple 1.6 6

/do_header {	% print default simple header
  gsave
    d_header_x d_header_y HFpt_h 3 div add translate

    HF setfont
    user_header_p {
      5 0 moveto user_header_left_str show

      d_header_w user_header_center_str stringwidth pop sub 2 div
      0 moveto user_header_center_str show

      d_header_w user_header_right_str stringwidth pop sub 5 sub
      0 moveto user_header_right_str show
    } {
      5 0 moveto fname show
      45 0 rmoveto fmodstr show
      45 0 rmoveto pagenumstr show
    } ifelse

  grestore
} def
%%EndResource
/d_page_w 794 def
/d_page_h 547 def
/d_header_x 0 def
/d_header_y 532 def
/d_header_w 794 def
/d_header_h 15 def
/d_footer_x 0 def
/d_footer_y 0 def
/d_footer_w 794 def
/d_footer_h 0 def
/d_output_w 794 def
/d_output_h 532 def
/cols 1 def
%%EndSetup
%%Page: (1) 1
%%BeginPageSetup
_S
90 rotate
24 -571 translate
/pagenum 1 def
/fname (grammar/hw2grammar.out) def
/fdir (grammar) def
/ftail (hw2grammar.out) def
% User defined strings:
/fmodstr (Wed Sep 25 11:30:49 2013) def
/pagenumstr (1) def
/user_header_p false def
/user_footer_p false def
%%EndPageSetup
do_header
5 519 M
(#include <ctype.h>) s
5 508 M
(#include <stdio.h>) s
5 497 M
(#include <stdlib.h>) s
5 486 M
(#include <time.h>) s
5 475 M
(#include "sequence.h") s
5 453 M
(// MATH 442: grammar) s
5 442 M
(//) s
5 431 M
(// Grammar production engine.) s
5 420 M
(//) s
5 398 M
(// readLine) s
5 387 M
(//) s
5 376 M
(// Reads a line of text from a file, places characters) s
5 365 M
(// into the contents of "line.") s
5 354 M
(//) s
5 343 M
(void readLine\(FILE *f, char *line\) {) s
5 332 M
(  char c;) s
5 321 M
(  int i=0;) s
5 310 M
(  while \(\(c = fgetc\(f\)\) != '\\n'\) {) s
5 299 M
(    line[i] = c;) s
5 288 M
(    i++;) s
5 277 M
(  }) s
5 266 M
(  line[i] = '\\000';) s
5 255 M
(}) s
5 233 M
(// readGrammar) s
5 222 M
(//) s
5 211 M
(// Reads an input file consisting of grammar productions.) s
5 200 M
(// First line gives the number of productions, and the) s
5 189 M
(// remaining lines are productions of the form ) s
5 178 M
(//      A->wxyz) s
5 167 M
(// where A is any uppercase letter and wxyz is a string) s
5 156 M
(// of upper- and lower-case letters.) s
5 145 M
(//) s
5 134 M
(// Sets the contents of the pointer "lines" equal to) s
5 123 M
(// the number of productions in the file.) s
5 112 M
(//) s
5 101 M
(// Returns an array of the production line strings.) s
5 90 M
(//) s
5 79 M
(char **readGrammar\(FILE *f, int *lines\) {) s
5 68 M
(  int l;) s
5 57 M
(  char line[80];) s
5 46 M
(  char **grammar;) s
5 24 M
(  // read the number of lines) s
5 13 M
(  fscanf\(f,"%d\\n",lines\);) s
5 2 M
(  // create the array of productions) s
_R
S
%%Page: (2) 2
%%BeginPageSetup
_S
90 rotate
24 -571 translate
/pagenum 2 def
/fname (grammar/hw2grammar.out) def
/fdir (grammar) def
/ftail (hw2grammar.out) def
% User defined strings:
/fmodstr (Wed Sep 25 11:30:49 2013) def
/pagenumstr (2) def
/user_header_p false def
/user_footer_p false def
%%EndPageSetup
do_header
5 519 M
(  grammar = \(char **\)malloc\(\(*lines\)*sizeof\(char *\)\);) s
5 497 M
(  // read each production line) s
5 486 M
(  for \(l = 0; l < \(*lines\); l++\) {) s
5 475 M
(    readLine\(f,line\);) s
5 464 M
(    grammar[l] = copy\(line\);) s
5 453 M
(  }) s
5 431 M
(  return grammar;) s
5 420 M
(}) s
5 398 M
(// production) s
5 387 M
(//) s
5 376 M
(// Chooses a random production from an array of productions) s
5 365 M
(// given by G, those whose left-hand side is the character A.) s
5 354 M
(//) s
5 343 M
(char *production\(char A, char **G, int lines\) {) s
5 332 M
(  int start, end;) s
5 321 M
(  int p;) s
5 310 M
(  // find the starting line of A-productions) s
5 299 M
(  for \(start = 0; start < lines && G[start][0] != A; start++\);) s
5 288 M
(  // find the line following the A-productions) s
5 277 M
(  for \(end=start; end<lines && G[end][0] == A; end++\);) s
5 266 M
(  // pick a line in that range) s
5 255 M
(  p = rand\(\) % \(end - start\) + start;) s
5 244 M
(  // return its right-hand side) s
5 233 M
(  return substring\(G[p],3,length\(G[p]\)\);) s
5 222 M
(}) s
5 200 M
(// hasUpper) s
5 189 M
(//) s
5 178 M
(// Returns whether a string has an uppercase letter.) s
5 167 M
(//) s
5 156 M
(int hasUpper\(char *s\) {) s
5 145 M
(  int i;) s
5 134 M
(  int len = length\(s\);) s
5 123 M
(  for \(i = 0; i < len; i++\) {) s
5 112 M
(    if \(isupper\(s[i]\)\) {) s
5 101 M
(      return 1;) s
5 90 M
(    }) s
5 79 M
(  }) s
5 68 M
(  return 0;) s
5 57 M
(}) s
5 35 M
(// replaceAll) s
5 24 M
(//) s
5 13 M
(// Given a string s of lower- and uppercase letters, replace) s
5 2 M
(// all the uppercase letters with thr right-hand sides of) s
_R
S
%%Page: (3) 3
%%BeginPageSetup
_S
90 rotate
24 -571 translate
/pagenum 3 def
/fname (grammar/hw2grammar.out) def
/fdir (grammar) def
/ftail (hw2grammar.out) def
% User defined strings:
/fmodstr (Wed Sep 25 11:30:49 2013) def
/pagenumstr (3) def
/user_header_p false def
/user_footer_p false def
%%EndPageSetup
do_header
5 519 M
(// one of their productions in G \(using "production" procedure) s
5 508 M
(// above\).) s
5 497 M
(//) s
5 486 M
(char *replaceAll\(char *s, char **G, int n\) {) s
5 475 M
(  int i;) s
5 464 M
(  char *front, *middle, *back;) s
5 453 M
(  int len = length\(s\);) s
5 442 M
(  for\(i = 0; i < len; i++\){) s
5 431 M
(    if \(isupper\(s[i]\)\) {) s
5 420 M
(      front = substring\(s, 0, i - 1\);) s
5 409 M
(      middle = production\(s[i], G, n\);) s
5 398 M
(      back = replaceAll\(substring\(s, i + 1, len-1\), G, n\);) s
5 387 M
(      s = append\(append\(front, middle\), back\);) s
5 376 M
(      break;) s
5 365 M
(    }) s
5 354 M
(  }) s
5 343 M
(  return s;) s
5 332 M
(}) s
5 310 M
(int main\(int argc, char **argv\) {) s
5 288 M
(  FILE *gf;) s
5 277 M
(  char **G;) s
5 266 M
(  char *x;) s
5 255 M
(  int notDone;) s
5 244 M
(  int n;) s
5 222 M
(  srand\(time\(NULL\)\);) s
5 211 M
(  if \(argc < 3\) {) s
5 189 M
(    printf\("Too few arguments!\\n"\);) s
5 178 M
(    return -1;) s
5 156 M
(  } else {) s
5 134 M
(    gf = fopen\(argv[1],"r"\);) s
5 123 M
(    G = readGrammar\(gf,&n\);) s
5 112 M
(    x = argv[2];) s
5 90 M
(    printf\("%s\\n",x\);) s
5 79 M
(    while \(hasUpper\(x\)\) {) s
5 68 M
(      x = replaceAll\(x,G,n\);) s
5 57 M
(      printf\("=>%s\\n",x\);) s
5 46 M
(    };) s
5 24 M
(    return 0;) s
5 13 M
(  }) s
5 2 M
(}) s
_R
S
%%Page: (4) 4
%%BeginPageSetup
_S
90 rotate
24 -571 translate
/pagenum 4 def
/fname (grammar/hw2grammar.out) def
/fdir (grammar) def
/ftail (hw2grammar.out) def
% User defined strings:
/fmodstr (Wed Sep 25 11:30:49 2013) def
/pagenumstr (4) def
/user_header_p false def
/user_footer_p false def
%%EndPageSetup
do_header
5 519 M
(#ifndef _SEQUENCE_H) s
5 508 M
(#define _SEQUENCE_H) s
5 486 M
(char *new\(int len\);) s
5 475 M
(char *copy\(char *str\);) s
5 464 M
(int length\(char *str\);) s
5 453 M
(char *append\(char *src1, char *src2\);) s
5 442 M
(char *substring\(char *src, int start, int end\);) s
5 420 M
(#endif) s
5 409 M
(#include "sequence.h") s
5 398 M
(#include <stdlib.h>) s
5 376 M
(char *new\(int len\) {) s
5 365 M
(  int i;) s
5 354 M
(  char *str;) s
5 343 M
(  str = \(char *\)malloc\(\(len+1\)*sizeof\(char\)\);) s
5 332 M
(  for \(i = 0; i <= len; i++\) {) s
5 321 M
(    str[i] = '\\000';) s
5 310 M
(  }) s
5 299 M
(  return str;) s
5 288 M
(}) s
5 266 M
(char *copy\(char *str\) {) s
5 255 M
(  int i;) s
5 244 M
(  int len = length\(str\);) s
5 233 M
(  char *cpy = new\(len\);) s
5 222 M
(  for \(i=0; i<len; i++\) {) s
5 211 M
(    cpy[i] = str[i];) s
5 200 M
(  }) s
5 189 M
(  cpy[i] = '\\000';) s
5 178 M
(  return cpy;) s
5 167 M
(}) s
5 145 M
(int length\(char *str\) {) s
5 134 M
(  int i=0;) s
5 123 M
(  while \(str[i] != '\\000'\) {) s
5 112 M
(    i++;) s
5 101 M
(  }) s
5 90 M
(  return i;) s
5 79 M
(}) s
5 57 M
(char *append\(char *src1, char *src2\) {) s
5 46 M
(  int i=0, j=0;) s
5 35 M
(  int len = length\(src1\)+length\(src2\);) s
5 24 M
(  char *out = new\(len\);) s
5 13 M
(  while \(src1[i] != '\\000'\){) s
5 2 M
(    out[i] = src1[i];) s
_R
S
%%Page: (5) 5
%%BeginPageSetup
_S
90 rotate
24 -571 translate
/pagenum 5 def
/fname (grammar/hw2grammar.out) def
/fdir (grammar) def
/ftail (hw2grammar.out) def
% User defined strings:
/fmodstr (Wed Sep 25 11:30:49 2013) def
/pagenumstr (5) def
/user_header_p false def
/user_footer_p false def
%%EndPageSetup
do_header
5 519 M
(    i++;) s
5 508 M
(  }) s
5 497 M
(  while \(src2[j] != '\\000'\){) s
5 486 M
(    out[i] = src2[j];) s
5 475 M
(    j++;) s
5 464 M
(    i++;) s
5 453 M
(  }) s
5 442 M
(  out[len] = '\\000';) s
5 431 M
(  free\(src1\);) s
5 420 M
(  free\(src2\);) s
5 409 M
(  return out;) s
5 398 M
(}) s
5 376 M
(char *substring\(char *src, int start, int end\) {) s
5 365 M
(  int i;) s
5 354 M
(  int len = end-start+1;) s
5 343 M
(  char *dst = new\(len\);) s
5 321 M
(  for \(i=start; i<=end; i++\) {) s
5 310 M
(    dst[i-start] = src[i];) s
5 299 M
(  }) s
5 288 M
(  dst[len] = '\\000';) s
5 266 M
(  return dst;) s
5 255 M
(}) s
5 222 M
(./grammar test.g aSSSb) s
5 211 M
(aSSSb) s
5 200 M
(=>aababaSbb) s
5 189 M
(=>aababaSSbb) s
5 178 M
(=>aababaabSSbb) s
5 167 M
(=>aababaabSSabbb) s
5 156 M
(=>aababaababaSbabbb) s
5 145 M
(=>aababaababaSSbabbb) s
5 134 M
(=>aababaababaabaSbbabbb) s
5 123 M
(=>aababaababaabaaSbbbabbb) s
5 112 M
(=>aababaababaabaaaSbbbbabbb) s
5 101 M
(=>aababaababaabaaaabbbbbabbb) s
5 90 M
(./grammar test.g aSb) s
5 79 M
(aSb) s
5 68 M
(=>aSSb) s
5 57 M
(=>aabSSb) s
5 46 M
(=>aabababb) s
5 35 M
(./grammar test.g ab) s
5 24 M
(ab) s
_R
S
%%Page: (1) 6
%%BeginPageSetup
_S
90 rotate
24 -571 translate
/pagenum 1 def
/fname (pgmdo/hw2pgmdo.out) def
/fdir (pgmdo) def
/ftail (hw2pgmdo.out) def
% User defined strings:
/fmodstr (Wed Sep 25 11:40:12 2013) def
/pagenumstr (1) def
/user_header_p false def
/user_footer_p false def
%%EndPageSetup
do_header
5 519 M
(#include <stdio.h>) s
5 508 M
(#include <stdlib.h>) s
5 497 M
(#include <math.h>) s
5 475 M
(//) s
5 464 M
(// MATH 442: pgmdo) s
5 453 M
(//) s
5 442 M
(// Simple portable grey map \(PGM\) image processor.) s
5 431 M
(//) s
5 409 M
(// outPGM) s
5 398 M
(//) s
5 387 M
(// Output a character to the given file, one that) s
5 376 M
(// corresponds in brightness to the value \(from 0.0) s
5 365 M
(// to 1.0\) given.) s
5 354 M
(//) s
5 343 M
(void outPGM\(FILE *f, float* img, int width, int height\) {) s
5 332 M
(  int r, c;) s
5 321 M
(  // for each image row) s
5 310 M
(  fprintf\(f, "P2\\n# CREATOR: Reed College... Hell Yeah!\\n%d\\n%d\\n255\\n", width, height\);) s
5 299 M
(  for \(r=0; r<height; r++\) {) s
5 288 M
(    // for each image column) s
5 277 M
(    for \(c=0; c<width; c++\) {) s
5 266 M
(      fprintf\(f, "%d", \(int\)round\(img[r*width+c]*255\)\);) s
5 255 M
(      fprintf\(f,"\\n"\);) s
5 244 M
(    }) s
5 233 M
(  }) s
5 222 M
(}) s
5 200 M
(// outASCII) s
5 189 M
(//) s
5 178 M
(// Output a character to the given file, one that) s
5 167 M
(// corresponds in brightness to the value \(from 0.0) s
5 156 M
(// to 1.0\) given.) s
5 145 M
(//) s
5 134 M
(void outASCII\(FILE *f, float value\) {) s
5 123 M
(  if \(value > 0.8\) {) s
5 112 M
(    fprintf\(f,"#"\);) s
5 101 M
(  } else if \(value > 0.5\) {) s
5 90 M
(    fprintf\(f,"x"\);) s
5 79 M
(  } else if \(value > 0.25\) {) s
5 68 M
(    fprintf\(f,";"\);) s
5 57 M
(  } else if \(value > 0.15\) {) s
5 46 M
(    fprintf\(f,","\);) s
5 35 M
(  } else {) s
5 24 M
(    fprintf\(f," "\);) s
5 13 M
(  }) s
5 2 M
(}) s
_R
S
%%Page: (2) 7
%%BeginPageSetup
_S
90 rotate
24 -571 translate
/pagenum 2 def
/fname (pgmdo/hw2pgmdo.out) def
/fdir (pgmdo) def
/ftail (hw2pgmdo.out) def
% User defined strings:
/fmodstr (Wed Sep 25 11:40:12 2013) def
/pagenumstr (2) def
/user_header_p false def
/user_footer_p false def
%%EndPageSetup
do_header
5 508 M
(// eatLine) s
5 497 M
(//) s
5 486 M
(// Reads a line of characters.) s
5 475 M
(//) s
5 464 M
(void eatLine\(FILE *f\) {) s
5 453 M
(  while \(fgetc\(f\) != '\\n'\);) s
5 442 M
(}) s
5 420 M
(void invertImage\(float *img, int width, int height\){) s
5 409 M
(  int r, c, i;) s
5 398 M
(  // for each image row) s
5 387 M
(  for \(r=0; r<height; r++\) {) s
5 376 M
(    // for each image column) s
5 365 M
(    for \(c=0; c<width; c++\) {) s
5 354 M
(      i = r * width + c;) s
5 343 M
(      img[i] = \(1-img[i]\);) s
5 332 M
(    }) s
5 321 M
(  }) s
5 310 M
(}) s
5 288 M
(void blurImage\(float *img, float *omg, int width, int height\){) s
5 277 M
(  int r, c, i;) s
5 266 M
(  // for each image row) s
5 255 M
(  for \(r=0; r<height; r++\) {) s
5 244 M
(    // for each image column) s
5 233 M
(    for \(c=0; c<width; c++\) {) s
5 222 M
(      i = r * width + c;) s
5 211 M
(      if \(\(i % width\) == 0\) {) s
5 200 M
(        if \(i < width\){) s
5 189 M
(          omg[i] = \(4*img[i] + 2*img[i+1]  + 2*img[i+r]\)/8;) s
5 178 M
(        }) s
5 167 M
(        else if \(i >= \(width * \(height - 1\)\)\){) s
5 156 M
(          omg[i] = \(4*img[i] + 2*img[i+1]  + 2*img[i-r]\)/8;) s
5 145 M
(        } else {) s
5 134 M
(          omg[i] = \(5*img[i] + img[i+1] + img[i-r] + img[i+r]\)/8;) s
5 123 M
(        }) s
5 112 M
(      }) s
5 101 M
(      else if \(\(i % \(width - 1\)\) == 0\){) s
5 90 M
(        if \(i < width\){) s
5 79 M
(          omg[i] = \(4*img[i] + 2*img[i-1]  + 2*img[i+r]\)/8;) s
5 68 M
(        }) s
5 57 M
(        else if \(i >= \(width * \(height - 1\)\)\){) s
5 46 M
(          omg[i] = \(4*img[i] + 2*img[i-1]  + 2*img[i-r]\)/8;) s
5 35 M
(        } else {) s
5 24 M
(          omg[i] = \(5*img[i] + img[i-1] + img[i-r] + img[i+r]\)/8;) s
5 13 M
(        }) s
5 2 M
(      }) s
_R
S
%%Page: (3) 8
%%BeginPageSetup
_S
90 rotate
24 -571 translate
/pagenum 3 def
/fname (pgmdo/hw2pgmdo.out) def
/fdir (pgmdo) def
/ftail (hw2pgmdo.out) def
% User defined strings:
/fmodstr (Wed Sep 25 11:40:12 2013) def
/pagenumstr (3) def
/user_header_p false def
/user_footer_p false def
%%EndPageSetup
do_header
5 519 M
(      else if \(i < width\){) s
5 508 M
(        omg[i] = \(5*img[i] + img[i+1] + img[i-1] + img[i+r]\)/8;) s
5 497 M
(      }) s
5 486 M
(      else if \(i >= \(width * \(height - 1\)\)\){) s
5 475 M
(        omg[i] = \(5*img[i] + img[i+1] + img[i-1] + img[i-r]\)/8;) s
5 464 M
(      }) s
5 453 M
(      else{) s
5 442 M
(        omg[i] = \(4*img[i] + img[i+1] + img[i-1] + img[i-r] + img[i+r]\)/8;) s
5 431 M
(      }) s
5 420 M
(    }) s
5 409 M
(  }) s
5 398 M
(}) s
5 376 M
(// echoASCII) s
5 365 M
(//) s
5 354 M
(// Read the a PGM file opened as "inf" and write a text file) s
5 343 M
(// of characters to "outf", ones whose brightness suggest the) s
5 332 M
(// levels of grey specified by the original image.) s
5 321 M
(//) s
5 310 M
(void echoASCII\(float *img, FILE *outf, int width, int height\) {) s
5 299 M
(  int r, c;) s
5 288 M
(  // for each image row) s
5 277 M
(  for \(r=0; r<height; r++\) {) s
5 266 M
(    // for each image column) s
5 255 M
(    for \(c=0; c<width; c++\) {) s
5 244 M
(      // output a pixel character to make ASCII art) s
5 233 M
(      outASCII\(outf,img[r*width+c]\);) s
5 222 M
(    }) s
5 211 M
(    // end the ASCII text line) s
5 200 M
(    fprintf\(outf,"\\n"\);) s
5 189 M
(  }) s
5 178 M
(}) s
5 156 M
(float *readImage\(FILE *inf,  int *width, int *height\) {) s
5 134 M
(  int max;) s
5 123 M
(  int pixel;) s
5 112 M
(  int r,c;) s
5 101 M
(  float *img=\(float *\)malloc\(sizeof\(float\)\);) s
5 79 M
(  // Read the PGM file's header info,) s
5 68 M
(                             // for example:) s
5 46 M
(  eatLine\(inf\);                // P5 \(or P2\)) s
5 35 M
(  eatLine\(inf\);                // # this was produced by some software) s
5 24 M
(  fscanf\(inf, "%d", width\);   // 9 5) s
5 13 M
(  fscanf\(inf, "%d", height\);) s
5 2 M
(  fscanf\(inf, "%d", &max\);     // 255) s
_R
S
%%Page: (4) 9
%%BeginPageSetup
_S
90 rotate
24 -571 translate
/pagenum 4 def
/fname (pgmdo/hw2pgmdo.out) def
/fdir (pgmdo) def
/ftail (hw2pgmdo.out) def
% User defined strings:
/fmodstr (Wed Sep 25 11:40:12 2013) def
/pagenumstr (4) def
/user_header_p false def
/user_footer_p false def
%%EndPageSetup
do_header
5 519 M
(  img=\(float *\)malloc\(sizeof\(float\)\);) s
5 508 M
(  // for each image row) s
5 497 M
(  for \(r=0; r<\(*height\); r++\) {) s
5 486 M
(    // for each image column) s
5 475 M
(    for \(c=0; c<\(*width\); c++\) {) s
5 464 M
(      // read a PGM pixel grey value \(from 0 to max\)) s
5 453 M
(      fscanf\(inf,"%d", &pixel\);) s
5 442 M
(      img[\(r*\(*width\)\) + c] = \(float\)pixel/\(float\)max;) s
5 431 M
(    }) s
5 420 M
(  }) s
5 409 M
(  return img;) s
5 398 M
(}) s
5 376 M
(// usage) s
5 365 M
(//) s
5 354 M
(// Outputs a message that gives the command-line description.) s
5 343 M
(//) s
5 332 M
(void usage\(char *cmd\) {) s
5 321 M
(  fprintf\(stderr,"usage: %s <option> <infile> <outfile>\\n", cmd\);) s
5 310 M
(  fprintf\(stderr,"\\twhere <infile> is a PGM and <option> is one of\\n"\);) s
5 299 M
(  fprintf\(stderr,"\\t\\t--blur    :outputs a blurred PGM image\\n"\);) s
5 288 M
(  fprintf\(stderr,"\\t\\t--invert  :outputs PGM negative image\\n"\);) s
5 277 M
(  fprintf\(stderr,"\\t\\t--ascii   :converts to ASCII art\\n"\);) s
5 266 M
(}) s
5 244 M
(// main) s
5 233 M
(//) s
5 222 M
(// This program accepts three arguments: a processing option) s
5 211 M
(// \("blur", "invert", or "ascii"\), a PGM file name for input,) s
5 200 M
(// and a text file name for output.  It reads the PGM file and) s
5 189 M
(// creates an output file with either an appropriate PGM \(if ) s
5 178 M
(// one of the first two options are given\) or a text file \(if) s
5 167 M
(// the last option is given\).) s
5 156 M
(//) s
5 145 M
(// Right now, only the "ascii" option works.) s
5 134 M
(//) s
5 123 M
(int main\(int argc, char **argv\) {) s
5 101 M
(  // input and output file "handles") s
5 90 M
(  FILE *inf, *outf;) s
5 79 M
(  float *img, *omg;) s
5 68 M
(  int width, height;) s
5 46 M
(  if \(argc < 4\) {) s
5 24 M
(    // whoops! not enough arguments) s
5 13 M
(    fprintf\(stderr,"Error: not enough arguments!\\n"\);) s
5 2 M
(    usage\(argv[0]\);) s
_R
S
%%Page: (5) 10
%%BeginPageSetup
_S
90 rotate
24 -571 translate
/pagenum 5 def
/fname (pgmdo/hw2pgmdo.out) def
/fdir (pgmdo) def
/ftail (hw2pgmdo.out) def
% User defined strings:
/fmodstr (Wed Sep 25 11:40:12 2013) def
/pagenumstr (5) def
/user_header_p false def
/user_footer_p false def
%%EndPageSetup
do_header
5 519 M
(    return -1;) s
5 497 M
(  } else {) s
5 475 M
(    // open the input \(PGM\) file) s
5 464 M
(    inf = fopen\(argv[2],"r"\);) s
5 453 M
(    if \(inf == NULL\) {) s
5 442 M
(      fprintf\(stderr,"Error: can't open file '%s' for reading.\\n",argv[2]\);) s
5 431 M
(      return -1;) s
5 420 M
(    }) s
5 398 M
(    // open the output file) s
5 387 M
(    outf = fopen\(argv[3],"w"\);) s
5 376 M
(    if \(outf == NULL\) {) s
5 365 M
(      fprintf\(stderr,"Error: can't open file '%s' for writing.\\n",argv[3]\);) s
5 354 M
(      return -1;) s
5 343 M
(    }) s
5 332 M
(    img = readImage\(inf,&width,&height\);) s
5 321 M
(    omg = img;) s
5 310 M
(    if \(strcmp\(argv[1],"--blur"\) == 0\) {) s
5 299 M
(      printf\("Blurring image..."\);) s
5 288 M
(      blurImage\(img, omg, width, height\);) s
5 277 M
(      outPGM\(outf, img, width, height\);) s
5 266 M
(      printf\("Done!\\n"\);) s
5 255 M
(    } else if \(strcmp\(argv[1],"--invert"\) == 0\) {) s
5 244 M
(      printf\("Inverting image..."\);) s
5 233 M
(      invertImage\(img, width, height\);) s
5 222 M
(      outPGM\(outf, img, width, height\);) s
5 211 M
(      printf\("Done!\\n"\);) s
5 200 M
(    } else if \(strcmp\(argv[1],"--ascii"\) == 0\) {) s
5 189 M
(      echoASCII\(img,outf, width, height\);) s
5 178 M
(    } else {) s
5 156 M
(      fprintf\(stderr,"Error: unrecognized option '%s.'\\n",argv[1]\);) s
5 145 M
(      usage\(argv[0]\);) s
5 123 M
(      // return FAIL) s
5 112 M
(      return -1;) s
5 101 M
(    }) s
5 79 M
(    // close the files) s
5 68 M
(    fclose\(inf\);) s
5 57 M
(    fclose\(outf\);) s
5 35 M
(    // return OK) s
5 24 M
(    return 0;) s
5 13 M
(  }) s
5 2 M
(}) s
_R
S
%%Page: (6) 11
%%BeginPageSetup
_S
90 rotate
24 -571 translate
/pagenum 6 def
/fname (pgmdo/hw2pgmdo.out) def
/fdir (pgmdo) def
/ftail (hw2pgmdo.out) def
% User defined strings:
/fmodstr (Wed Sep 25 11:40:12 2013) def
/pagenumstr (6) def
/user_header_p false def
/user_footer_p false def
%%EndPageSetup
do_header
5 519 M
(############################################################) s
5 508 M
(############################################################) s
5 497 M
(#######################;,   ,;x#############################) s
5 486 M
(#################x;;xx          x#####x ####################) s
5 475 M
(##############x;   x#            ,####x   ,,   ,;###########) s
5 464 M
(############x      ##;            x####;          ;#########) s
5 453 M
(###########,       ;##;           x######    ;x;   #########) s
5 442 M
(##########x       ;  ,#x;         ######x     ;# xx#########) s
5 431 M
(#########; ;x;;;x#x  ,#;        ,######;       x##  ,#######) s
5 420 M
(#######;     ;xxx##;  #       ;x######x      ;#x;,,  ;######) s
5 409 M
(######           ,  ,;,x      ########       xx;;xx; ,######) s
5 398 M
(#####;          x  ;#####;    #######;       ,;;,,;;#;######) s
5 387 M
(######;,,,,;;x##x  x####,     #######          x############) s
5 376 M
(#####,  #######x;,  x###      ######;         ##########xx##) s
5 365 M
(###x             ,;;x###x     x####x         x#########;  ;#) s
5 354 M
(##x            ; x#######x     ####          ##########  ;;#) s
5 343 M
(###,        ;x#x ;xxx#         x##  ;        ##########,,  ;) s
5 332 M
(#####x     ,###    ;##;         #####        x#########,   ;) s
5 321 M
(x ;;        ##;    ####;         ####;,#,     x########; x##) s
5 310 M
(x;           ##    x####x         ######x ,#,  ########, x##) s
5 299 M
(#             ,xx;,                ;#   #########; ##x    ##) s
5 288 M
(#x,             x##; ;x                 ;#   xxx;  #;  ,  ##) s
5 277 M
(#####xxxxx       x#   xx,   ,;x#         ;    x   x##,x# ;##) s
5 266 M
(#########          ,x###,x######x,            x ;#, x##x  xx) s
5 255 M
(#########,       ,x####      ;; ;##x;         x;x    ##x  ;#) s
5 244 M
(############xx#########         x;,    x      x;  x######x##) s
5 233 M
(################;    x##x ;#    ;      #      xx  ##########) s
5 222 M
(##############x       x####;   x      ;#     ,##  x#########) s
5 211 M
(#############x    ,    ###x   x,      x#      ## ;x#########) s
5 200 M
(############x   x###;  ####;,#       ;#;       x########xxx#) s
5 189 M
(############   x####x  x######   ;xx##x         x######x   x) s
5 178 M
(###########   x#####;  #######x   ##x            ; ####;   ;) s
5 167 M
(##########   x#####x  ;######x    xx          ##   x##x ; ;x) s
5 156 M
(#########   x#####;   ######,     ,x           ;xx;###,;   x) s
5 145 M
(# ;####;   ;####x    #####;        x   ,         ;#x       ;) s
5 134 M
(#   ;     ;###x    ;####,          ;#x#x    , x#; #x  ,;;#x;) s
5 123 M
(#        ,###,   ;####,             x###;  x# #######; ###x#) s
5 112 M
(##      ,###,  ;#####                ,#### #########   x####) s
5 101 M
(##x     ###x  ;#####                     ##########x ,##x###) s
5 90 M
(##,    ;#x#x  #####;                    ;###########,   ####) s
5 79 M
(##  x  ;#;xx ,#####                    ;############# ;#####) s
5 68 M
(#x  ##    xx  ####;             ;;xxx#######################) s
5 57 M
(#x  x##   x#   ,;             ##############################) s
5 46 M
(##;  ###xx##x                #####,  x######################) s
5 35 M
(##############              x#####    ;#####################) s
5 24 M
(##################           ####;     ;####################) s
5 13 M
(##################;          ,###       ;###################) s
5 2 M
(#############x  ;##           x#;        x##################) s
_R
S
%%Page: (7) 12
%%BeginPageSetup
_S
90 rotate
24 -571 translate
/pagenum 7 def
/fname (pgmdo/hw2pgmdo.out) def
/fdir (pgmdo) def
/ftail (hw2pgmdo.out) def
% User defined strings:
/fmodstr (Wed Sep 25 11:40:12 2013) def
/pagenumstr (7) def
/user_header_p false def
/user_footer_p false def
%%EndPageSetup
do_header
5 519 M
(#############,    x#;          #,         ##################) s
5 508 M
(#############       ;x         x          ;#################) s
5 497 M
(#############                  ;,         ,#################) s
5 486 M
(#############,                 ,x;;       ,#################) s
5 475 M
(#############;  ;#;            ;###x      ;#################) s
5 464 M
(##############   x#x           x###x      ##################) s
5 453 M
(##############;   ###         ;##x;      x##################) s
5 442 M
(##############,   x###x;    ,x##x       ;###################) s
5 431 M
(##############    ;#############      ,x####################) s
5 420 M
(##############,    ############x     x######################) s
5 409 M
(###############    ;###########x       #####################) s
5 398 M
(###############;    x###########x      ;####################) s
5 387 M
(############### ,  ;; ############x;     ;##################) s
5 376 M
(###############,; # ; x#############x       ;x##############) s
5 365 M
(################;;; ; ###############   ; ,    ;############) s
5 354 M
(################x#;;#;#################  x;x x  ############) s
5 343 M
(##################x####################; x ; , ;############) s
5 332 M
(########################################x# x;;x#############) s
5 321 M
(############################################################) s
5 310 M
(blur) s
5 299 M
(############################################################) s
5 288 M
(############################################################) s
5 277 M
(############################################################) s
5 266 M
(######################x;;, ,;;x#############################) s
5 255 M
(#################xx;x;,       ,;x#####x;####################) s
5 244 M
(##############x;;,,xx,        ,,,;xxxxx,,,,,,,;;xx##########) s
5 233 M
(############x;;;, ,xx;        ,,,;xxxxx;,,,,  ,,,;x#########) s
5 222 M
(##########x;,,;;,  ;xx;     ,,,,,;xxxxx#x;,,,xx;,,;#########) s
5 211 M
(##########x;,,,;;,,  ;xx;  ,,;;,,;xxxxxxx,,;;;;x;xxx########) s
5 200 M
(#########x;;;;;xxxx, ;x;,;;,,,;,,xxxxxx;,;,,,;;xxx;,;#######) s
5 189 M
(xx#####x;;,,,;xxxxx; ,x;;;;;,,;xxxxx##x,,,,,,xxx;;;,;;####xx) s
5 178 M
(#xxx#x;,,,,,,,,,    ;;;x;,,, ,xxx#x##x,,,,,,;xxxxxx;,;######) s
5 167 M
(##xxx;,,,;;;;;,;;  x#####;,  ,x#####x;   ;,;;;;;;;;;xx##x##x) s
5 156 M
(#####x;;;;;;;xxx;,;x####;,,, ,x#####x;,,,,;;;;;x#####xxx####) s
5 145 M
(####x;,;x####xxx;;;;x##x;,,, ,xxx###x;,,,,,,;;#####xxxxxxxx#) s
5 134 M
(###x;,,;;;,,,,,,;;;;x#xx;     ;####x;;;,,   ,x####xxxxx;  ;x) s
5 123 M
(##x;;;;;;;,   ,;;x##xxxxx;    ;####;;;;;    ,x####xxxxx, ;x#) s
5 112 M
(x#x;;;,,,,, ;xxx;xxxxx,      ,;x#x;;;;,     ;x####xxxxx;;,,;) s
5 101 M
(xx###x;,,,,;xxx;,;;x#x;     ,;;;x###x;,,   , ;xxx#####x;;,,;) s
5 90 M
(;;;;;,,,,,,;xx;,,,;x##x;    ,,;;;####;;x;;,  ,xxxxx###x;;xxx) s
5 79 M
(;;,,,,,,,,,,;xx;;;;x##xxx,  ,,,,;;x#xx##x;;x, ,xxxxxx#x;;x##) s
5 68 M
(x,      ,,,,,,;xx;;,;,,,,,,,,  ,,,,;x,,,x#xxxxxxx;,xx;  ,;x#) s
5 57 M
(#x;,,,,,,,   ,  ;xx;;;x,,,,   ,      ,;;xx;;;xxx; ,x;    ;xx) s
5 46 M
(####xxxxxx,      ;x,,;xx;,,,;;xx,,  ,,,;;;,,;;;   ;xx;xx,;x#) s
5 35 M
(#x######x;    ,,  ,,x##x;x######x,  ,,,,,,,;;;x,;x;;x##x;;xx) s
5 24 M
(xxxxxxxxx;;,,   ,;xxxxx;;,,,,;;;;xxx;,,,,,;;;;x;x,,,;x#x;;xx) s
5 13 M
(#xxxxxx##xxxxxxxxxxxx#x,,,;;;;;;xx;;;;;x;;;;;;x;;;xxxxxx#x##) s
5 2 M
(##xxx##xxxxx##xx;,,,;x#xx;xx;;;;;;;;;;;#;;,,,;xx;;xxx#xx####) s
_R
S
%%Page: (8) 13
%%BeginPageSetup
_S
90 rotate
24 -571 translate
/pagenum 8 def
/fname (pgmdo/hw2pgmdo.out) def
/fdir (pgmdo) def
/ftail (hw2pgmdo.out) def
% User defined strings:
/fmodstr (Wed Sep 25 11:40:12 2013) def
/pagenumstr (8) def
/user_header_p false def
/user_footer_p false def
%%EndPageSetup
do_header
5 519 M
(#xxx#x#xxxxx##x,  ,;;;x####x;;;x;;;;;;x#;;,,,;xx,,x####x####) s
5 508 M
(#x#xxxx#xx##x;,   ;;,,;###x;;;x;;;;;;;x#;;,,,,xx,;x#########) s
5 497 M
(#xxxxxx####x;  ,;x##x;;####x;x;;;;;;;x#x;;,   ;x########xx##) s
5 486 M
(#xx#######xx  ,xx###x;;#######;;;xxx##x;;,  ,;;;x##xx##x;;;x) s
5 475 M
(#xx#######x, ,xxxx#x;;;####x##x;;;##x;;,,,,,,;;;;;;x###x;;;;) s
5 464 M
(####xx###x, ,x##xxxx;;;x#####x;;;;xx;,,,,;,,,;#x,,;x##x;;,;x) s
5 453 M
(#x#xxxxxx,  ;xx##x;;;,xx####;,,,;;;;,,,;;;,,  ,;xxx##x;;,,,x) s
5 442 M
(x;;xxxx;   ;xxxxx,  ,x####;,      ,;,;;;,     ;;;xx;    ,,,;) s
5 431 M
(x;,;;     ;x#x;;,  ;xx#x;;        ,xxxx;   ,;;xx;;x;  ,;;xx;) s
5 420 M
(x;,,    ,;x##;;;;;x##x;;,,,      ;;;xxxx;,;xx;x##xxxx;;x##xx) s
5 409 M
(#x;,, ,,;###;;;;xx##x;,;;;,,,, ,;;;,,;###x;xxx###xxx,,,x##xx) s
5 398 M
(xxx;,,,;x##x;,;x####;;;;,,,,,,,,,,,,;;;;;xxxxx####x;,;x#x#xx) s
5 387 M
(xx;,,,,;#x#x;,xxx##;;;;,,,,,,;,,,,,;;;;;;xxxxxx####x,,,;x#xx) s
5 376 M
(#x;;;;;;x;xx;;x###x;;;,,;;,,,,,;  ,,;;;;##xxxxxx#x#xx,;#####) s
5 365 M
(#x;;xx;,,;xx;;x###x;,,,,;;,,,;;,;;;xx######xx##xx###########) s
5 354 M
(#x;;x#x;,;xx;,;;;;;;,,,;;;;;;;##############xx########x#####) s
5 343 M
(##;;;x##xx##x;;;;;;;;;;;;;;;;####x;,;x######################) s
5 332 M
(####xx#######x;;;;,,,;;;;;;;x#####;,,,;#####################) s
5 321 M
(##################;;,,,;;;;;;####;,,,,,;####################) s
5 310 M
(##################x;,,,,,,;;,;##x;,,,,,,x###################) s
5 299 M
(#############x;;;##;;,,,,,  ,,x#x;,,,,,,;x##################) s
5 288 M
(############x;,,,;x#;;,,,     ;x;;,,,,,,,;x#################) s
5 277 M
(############x;,,,,,;xx;,      ,;,,,,,,,,,,x#################) s
5 266 M
(############x;,,,,,,,;,        ;,,,,,,,,,,;#################) s
5 255 M
(############x;,,,,,,,,    ,    ,;;;,,,,,,;;#################) s
5 244 M
(#############;,;xx;,,,   ,,,   ;xxxx,,,;;;x#################) s
5 233 M
(#############x;,;xxx;    ;;;, ,xxxxx,,;;;;x#################) s
5 222 M
(##############x;,;##x,  ,;;;;,;xxx;,;;;,,x##################) s
5 211 M
(##############;;,;xxxxx;,,;;;x##x;,,;,,,;###################) s
5 200 M
(#############x;;;;;xxxx########x;,,, ,;x####################) s
5 189 M
(##############;;;;;x###########x;,, ,xx#####################) s
5 178 M
(##############x;,,,x###########x;,, ,,;x####################) s
5 167 M
(###############;   ;x###########x;,,  ,;x###################) s
5 156 M
(###############,, ,;;;############x;,   ,;x#################) s
5 145 M
(###############;;;;,,;x#############;      ,;x##############) s
5 134 M
(################x;;;;;x##############;,,,,    ;x############) s
5 123 M
(################x#xxxx#################;,;;;,;,;############) s
5 112 M
(#######################################x;x;;;;;x############) s
5 101 M
(########################################xx;xx;x#############) s
5 90 M
(############################################################) s
5 79 M
(############################################################) s
5 68 M
(invert) s
5 46 M
(                                                            ) s
5 35 M
(                       xx####x;        ,                    ) s
5 24 M
(                 ;xx;;##########;     ;#,                   ) s
5 13 M
(              ,x###, ############x    ;########xx           ) s
5 2 M
(            ;######  x############;    x##########x         ) s
_R
S
%%Page: (9) 14
%%BeginPageSetup
_S
90 rotate
24 -571 translate
/pagenum 9 def
/fname (pgmdo/hw2pgmdo.out) def
/fdir (pgmdo) def
/ftail (hw2pgmdo.out) def
% User defined strings:
/fmodstr (Wed Sep 25 11:40:12 2013) def
/pagenumstr (9) def
/user_header_p false def
/user_footer_p false def
%%EndPageSetup
do_header
5 519 M
(           ########x  x###########;      ####x;x###         ) s
5 508 M
(          ;#######x##x ,x#########      ;#####x,#;;,        ) s
5 497 M
(         x#x;xxx; ;### x#########,     x#######;, ###       ) s
5 486 M
(       x#####x;;,, x##,#######x,      ;######x,;x#x##x      ) s
5 475 M
(      ###############xx;######        #######;,xx;;x##      ) s
5 464 M
(     x##########;##x     x####       x########xx##xx,x      ) s
5 453 M
(      x#xxxxx;  ;##,    x#####       ##########;            ) s
5 442 M
(     x##,     ,;x###;,  ######,     x#########          ;,  ) s
5 431 M
(   ;##############xx;   ;#####;    ,#########;         x##x ) s
5 420 M
(  ,############x#;     , ;#####    ##########          ##xx ) s
5 409 M
(   #########x; ;#x;;; #########;  ##x########,         xx##x) s
5 398 M
(     ;#####x   ####x  x#########  , ,########;         x###x) s
5 387 M
(;#xx########  x####    x#########    xx ######,        x#,  ) s
5 376 M
(;x###########  ####;    ;#########      ;## x##        ##;  ) s
5 365 M
( ##############;;x#################x ###         x#  ;####  ) s
5 354 M
( ,##############;  x#x,#################x,###,;;x## x#####  ) s
5 343 M
(     ;;;;;#######; ###;;x####x; #########x####;###;  #, #x  ) s
5 332 M
(         ##########x;   #;,    ,;#############;#x ##;  ;##;;) s
5 321 M
(         x########;    ######xx#x  ;x#########,x,####  ;##x ) s
5 310 M
(           ,;;,        #########;x#####;######;x##;      ;  ) s
5 299 M
(                x####;  ;#x ####x###### ######;;##,         ) s
5 288 M
(              ;#######;    x###,######x #####x ,##;         ) s
5 277 M
(             ;#########   ;###;x######; ######, #x;         ) s
5 266 M
(            ;###;   x##,   x# #######x x#######;        ,;, ) s
5 255 M
(            ###;    ;##,      ###x;;  ;#########;      ;###;) s
5 244 M
(           ###,     x##       ;###  ;############x#,   x###x) s
5 233 M
(          ###;     ;##x      ;####;;########## ,###;  ;#x#x;) s
5 222 M
(        ,###;     x###      x#####x;###########x;;x   #x###;) s
5 211 M
( #x    x###x    ;####     x########;#############x ;#######x) s
5 200 M
( ###x#####x   ;####x   ,###########x ; ;######; x# ;###xx ,x) s
5 189 M
( #########   ####x    ##############;   x##; #       x#   ; ) s
5 178 M
(  #######   x##x    ,################x   ,#         ###;    ) s
5 167 M
(  ,#####   ;##x     #####################          ;#x  ,   ) s
5 156 M
(  #####x , ;##     x####################x           x###    ) s
5 145 M
( ,##;##x x,;##    ,####################x             #x     ) s
5 134 M
( ;## ,####;,##    x#############xx;;;                       ) s
5 123 M
( ,##; ,###; ####x#############                              ) s
5 112 M
(  x##   ;;  ;################     x##,                      ) s
5 101 M
(    ,,       ,##############;     ####x                     ) s
5 90 M
(                  ###########    x#####x                    ) s
5 79 M
(                  x###########  ,#######x                   ) s
5 68 M
(             ;##x  ###########; x########;                  ) s
5 57 M
(             x####; x########## ##########                  ) s
5 46 M
(             #######x;#########;##########x                 ) s
5 35 M
(             ##################x##########x                 ) s
5 24 M
(             ##################x;xx########                 ) s
5 13 M
(             x##x x############x   ;######x                 ) s
5 2 M
(              ###; ;###########;   ;######,                 ) s
_R
S
%%Page: (10) 15
%%BeginPageSetup
_S
90 rotate
24 -571 translate
/pagenum 10 def
/fname (pgmdo/hw2pgmdo.out) def
/fdir (pgmdo) def
/ftail (hw2pgmdo.out) def
% User defined strings:
/fmodstr (Wed Sep 25 11:40:12 2013) def
/pagenumstr (10) def
/user_header_p false def
/user_footer_p false def
%%EndPageSetup
do_header
5 519 M
(              x###  ,#########x  ,x######;                  ) s
5 508 M
(              x###;   ,x#####;  ;#######x                   ) s
5 497 M
(              ####x             ######x;                    ) s
5 486 M
(              x####            ;#####;                      ) s
5 475 M
(              ,####x           ;#######                     ) s
5 464 M
(               x####;           ;######x                    ) s
5 453 M
(               ####xx#            ;x#####x,                 ) s
5 442 M
(               xx#,#x#,             ;#######x;              ) s
5 431 M
(                xxx#x#               ###x######x            ) s
5 420 M
(                ; xx x                 ##;x,#;##            ) s
5 409 M
(                  ,                    x#;#x###x            ) s
5 398 M
(                                        ;,#;xx;             ) s
5 387 M
(                                                            ) s
5 376 M
(                                                            ) s
5 365 M
(                                                                ) s
5 354 M
(                                                                ) s
5 343 M
(                              ,                                 ) s
5 332 M
(                            ;;;;,                               ) s
5 321 M
(                          ,;;;;;;;,                             ) s
5 310 M
(                         ;;;xx###x,                             ) s
5 299 M
(                         ;;x#####x;                             ) s
5 288 M
(                         ;;xxxxxxxx                             ) s
5 277 M
(                         ;;xxx;xx;;,                            ) s
5 266 M
(                         xxxxxxxxxx,                            ) s
5 255 M
(                         xxxx##xxxx                             ) s
5 244 M
(                         ;#xxxxx;;x                             ) s
5 233 M
(                          xxxxxx;;;                             ) s
5 222 M
(                          ;xxxx;;;;                             ) s
5 211 M
(                          ,x;x#xx;                              ) s
5 200 M
(   ,;,                    ;xx;;x;;                              ) s
5 189 M
(    x;                  ;;xxxx, ;,,,                        ;,  ) s
5 178 M
(    ;;;    ;         ,;xxxx#xx;;x;;;;,                ;    ;;;, ) s
5 167 M
(    ;;x;  ;x       ,;;;xxxxx#xx#x,;;;;;              ,x;  ;x;;  ) s
5 156 M
(    ;;;x, ;;   , ,,,,,,;xxxxxxxx;;;;;  ,,             x; ;xx;   ) s
5 145 M
(     ;;xx;x,  ; , ,,,,  ,;;;;;;;;;;,   ;,,,           x;;xx;;;  ) s
5 134 M
(     ;;;xxx, ;,  ,, ,,    ;;;;;;;;    ,;,,,,,,,      ,xxxxxx,   ) s
5 123 M
(     ,xxxxx,;; , ,  ,,    ,; ;;;;;    ,,,,,  ,;,     ;xxxxx;,,  ) s
5 112 M
(      ;xxx;,,  , ,  ,      ; ;;;;,    ,,,,,,, ,;,,   ;xxxxx;,,  ) s
5 101 M
(      ,;x;    ,  ,  ,,     ;,,,;;      ,,, ,,   ,;   ,;xx;,     ) s
5 90 M
(     ,  ,,   ,,          , ,,, ;,     ,,,, ,;,  ,,    ;x;       ) s
5 79 M
(     ,              ,    ,  ; ,;  ,    ,,, ,;,,,,               ) s
5 68 M
(    ;  ,,           ,       , ;;  ,   ,,,,  ,,,,,               ) s
5 57 M
(   ,,                       ,,;,        ,,, ,                   ) s
5 46 M
(   ,,                       ,;;         ,,,                     ) s
5 35 M
(                             ,;        ,,,,                     ) s
5 24 M
(                              ;                                 ) s
5 13 M
(                             ,,                            ,    ) s
5 2 M
(                             ;;                            ,    ) s
_R
S
%%Page: (11) 16
%%BeginPageSetup
_S
90 rotate
24 -571 translate
/pagenum 11 def
/fname (pgmdo/hw2pgmdo.out) def
/fdir (pgmdo) def
/ftail (hw2pgmdo.out) def
% User defined strings:
/fmodstr (Wed Sep 25 11:40:12 2013) def
/pagenumstr (11) def
/user_header_p false def
/user_footer_p false def
%%EndPageSetup
do_header
5 519 M
(                            ;##;                           ,    ) s
5 508 M
(                           ,x###                                ) s
5 497 M
(                           ,x###,                               ) s
5 486 M
(                            ;##x                                ) s
5 475 M
(                            ,;;                  ,              ) s
5 464 M
(                                                 ,   ,          ) s
5 453 M
(                                                                ) s
5 442 M
(                                                                ) s
5 431 M
(                                                                ) s
5 420 M
(                                                                ) s
5 409 M
(                                                                ) s
5 398 M
(                                                                ) s
5 387 M
(                                                                ) s
5 376 M
(                                                                ) s
5 365 M
(                           ,                                    ) s
5 354 M
(                                                                ) s
5 343 M
(                                                                ) s
5 332 M
(blur) s
5 321 M
(                                                                ) s
5 310 M
(                                                                ) s
5 299 M
(                                                                ) s
5 288 M
(                           ,;;;;,                               ) s
5 277 M
(                          ,;;;;;;;,                             ) s
5 266 M
(                        ,;;;xxxxx;;,,                           ) s
5 255 M
(                      ,,,;;xxxxxxx;,,,,                         ) s
5 244 M
(                     ,, ,;;xxxxxxx;,                            ) s
5 233 M
(                        ,;;;x;;;;;;,                            ) s
5 222 M
(                       ,,;;xxxxxx;;,                            ) s
5 211 M
(                       ,,;xxxxxxxx;,                            ) s
5 200 M
(                         ;xxxxx;;;;                             ) s
5 189 M
(                         ,;;;;;;;;;                             ) s
5 178 M
(                          ,;;x;;;;,                             ) s
5 167 M
(                          ,;;;xx;;                              ) s
5 156 M
(   ,;                     ;;;;;;;,                              ) s
5 145 M
(    ;;                  ,;;x;;, ,,,,                        ;   ) s
5 134 M
(    ;;;   ,;,        ,;;;;;xx;;;;,;;;,     ,,        ,;    ;;;, ) s
5 123 M
(    ;;;; ,;;,,  ,,,,,;;;;;;xxxxx;,;;;;; ,,,          ;x;  ;;;,  ) s
5 112 M
(    ;;;;;,;;  ,,,,,,,,,;;;;;;;;;;;;;; ,,,,           ;;; ;;;;   ) s
5 101 M
(     ;;;;;;; ,;,,  ,,,  ,;;;;;;;;;;; ,,;,,          ,;x;;xx;;,  ) s
5 90 M
(     ,;;xxx;,;,,,,,,,,    ,;;;;;;;,,,,,,,,   ,   ,,,,;xxx;;;,   ) s
5 79 M
(     ,;;xx;;;; ,,,,,,     ,,,;;;;;,,  ,,,,    ,,   , ;xx;;;;,,  ) s
5 68 M
(      ;;xx;,,,,,,,,,,      , ,;;;;,   ,,,, ,   ,,,   ;;xx;;;,,  ) s
5 57 M
(      ,;;;    ,,,,,,,      ,,,;;;,     ,,, ,,   ,,   ,;xx;,     ) s
5 46 M
(      ,,,,   ,, ,,,,        ,,,;,      ,,, ,,    ,    ;;;,      ) s
5 35 M
(     ,           ,,,,       , ,,           ,,,,,                ) s
5 24 M
(    ,  ,,                     ,,         ,  ,,                  ) s
5 13 M
(   ,,                       ,,,,                                ) s
5 2 M
(                             ,,                                 ) s
_R
S
%%Page: (12) 17
%%BeginPageSetup
_S
90 rotate
24 -571 translate
/pagenum 12 def
/fname (pgmdo/hw2pgmdo.out) def
/fdir (pgmdo) def
/ftail (hw2pgmdo.out) def
% User defined strings:
/fmodstr (Wed Sep 25 11:40:12 2013) def
/pagenumstr (12) def
/user_header_p false def
/user_footer_p false def
%%EndPageSetup
do_header
5 519 M
(                             ,,                                 ) s
5 508 M
(                              ,                                 ) s
5 497 M
(                                                                ) s
5 486 M
(                             ;,                            ,,,  ) s
5 475 M
(                            ;xx;                           ,,,  ) s
5 464 M
(                           ,;xxx,                         ,,,   ) s
5 453 M
(                            ;xxx,                         ,,    ) s
5 442 M
(                            ;xx;                                ) s
5 431 M
(                            ,;;                                 ) s
5 420 M
(                                                 ,              ) s
5 409 M
(                                                                ) s
5 398 M
(                                                                ) s
5 387 M
(                                                                ) s
5 376 M
(                                                                ) s
5 365 M
(                                                                ) s
5 354 M
(                                                                ) s
5 343 M
(                                                                ) s
5 332 M
(                                                                ) s
5 321 M
(                                                                ) s
5 310 M
(                                                                ) s
5 299 M
(                                                                ) s
5 288 M
(invert) s
5 277 M
(################################################################) s
5 266 M
(################################################################) s
5 255 M
(################################################################) s
5 244 M
(############################xxxxx###############################) s
5 233 M
(##########################xxxxxxxx##############################) s
5 222 M
(#########################xxx;,,,,;x#############################) s
5 211 M
(#########################xx;,   ,;x#############################) s
5 200 M
(#########################xx;,,;;,;;#############################) s
5 189 M
(#########################xx;;;x;;xx#############################) s
5 178 M
(#########################;;;,,;,;;;#############################) s
5 167 M
(#########################;;;; ,;;;;#############################) s
5 156 M
(#########################x,;;;;;xx;#############################) s
5 145 M
(##########################;;;;;;xxx#############################) s
5 134 M
(##########################x;;;;xxxx#############################) s
5 123 M
(##########################x;x;,;;x##############################) s
5 112 M
(###xx#####################x;;xx;xx##############################) s
5 101 M
(####;x##################xx;;;;##xxxx########################x###) s
5 90 M
(####xxx####x#########xx;;;; ,;xx;xxxxx################x####xxx##) s
5 79 M
(####xx;x##x;########xxx;;;;; ,; ;xxxxxx###############;x##x;xx##) s
5 68 M
(####xxx;x#xx###x####x##x;;;;;;;;xxxxx###x#############;x#x;;x###) s
5 57 M
(#####xx;;x;x##x#####xx###xxxxxxxxxxx###xxx############;xx;;xxx##) s
5 46 M
(#####xxx;,;##x#######x####xxxxxxxx#####xx####x#######x,;;;;;x###) s
5 35 M
(######;;;,;#xx############xx#xxxxx#####x######xx#####x;;;;;xxx##) s
5 24 M
(######x;;;xxx##############x#xxxx##############xx####x;;;;;xxx##) s
5 13 M
(#######x;x#################xxxxxx########x##x###xx####x;;xx#####) s
5 2 M
(########x###################x##xx########x##x#########x;x#######) s
_R
S
%%Page: (13) 18
%%BeginPageSetup
_S
90 rotate
24 -571 translate
/pagenum 13 def
/fname (pgmdo/hw2pgmdo.out) def
/fdir (pgmdo) def
/ftail (hw2pgmdo.out) def
% User defined strings:
/fmodstr (Wed Sep 25 11:40:12 2013) def
/pagenumstr (13) def
/user_header_p false def
/user_footer_p false def
%%EndPageSetup
do_header
5 519 M
(#####x###################x##x##x##x#########xx#x################) s
5 508 M
(####x###x###################x#xx############xx##################) s
5 497 M
(####x#######################xxx#################################) s
5 486 M
(#############################xx#################################) s
5 475 M
(#############################xx#################################) s
5 464 M
(##############################x#################################) s
5 453 M
(################################################################) s
5 442 M
(#############################xx#################################) s
5 431 M
(############################x  x################################) s
5 420 M
(############################;   ################################) s
5 409 M
(############################;   ################################) s
5 398 M
(############################x  ;################################) s
5 387 M
(############################xxx#################################) s
5 376 M
(#################################################x##############) s
5 365 M
(################################################################) s
5 354 M
(################################################################) s
5 343 M
(################################################################) s
5 332 M
(################################################################) s
5 321 M
(################################################################) s
5 310 M
(################################################################) s
5 299 M
(################################################################) s
5 288 M
(################################################################) s
5 277 M
(################################################################) s
5 266 M
(################################################################) s
5 255 M
(################################################################) s
_R
S
%%Page: (1) 19
%%BeginPageSetup
_S
90 rotate
24 -571 translate
/pagenum 1 def
/fname (search/hw2search.out) def
/fdir (search) def
/ftail (hw2search.out) def
% User defined strings:
/fmodstr (Wed Sep 25 11:41:41 2013) def
/pagenumstr (1) def
/user_header_p false def
/user_footer_p false def
%%EndPageSetup
do_header
5 519 M
(12) s
5 508 M
(2 3 1) s
5 497 M
(3 0 4 2) s
5 486 M
(2 1 5) s
5 475 M
(3 0 4 6) s
5 464 M
(4 1 3 5 7) s
5 453 M
(3 2 4 8) s
5 442 M
(3 3 7 9) s
5 431 M
(4 4 6 8 10) s
5 420 M
(3 5 7 11) s
5 409 M
(2 6 10) s
5 398 M
(3 7 9 11) s
5 387 M
(2 8 10) s
5 376 M
(#include <stdio.h>) s
5 365 M
(#include <stdlib.h>) s
5 354 M
(#include "stack.h") s
5 343 M
(#include "queue.h") s
5 332 M
(#include "node.h") s
5 310 M
(//) s
5 299 M
(// MATH 442 : graph) s
5 288 M
(//) s
5 277 M
(// Graph traversal program.) s
5 266 M
(//) s
5 244 M
(// readGraph) s
5 233 M
(//) s
5 222 M
(// Reads a text file that describes the) s
5 211 M
(// edge adjacency structure of a graph.) s
5 200 M
(//) s
5 189 M
(// The format is) s
5 178 M
(//) s
5 167 M
(//    \(# of vertices\)) s
5 156 M
(//    \(#neighbors of 0\) n1 n2 n3 ...) s
5 145 M
(//    \(#neighbors of 1\) ...) s
5 134 M
(//    ...) s
5 123 M
(//) s
5 112 M
(// The vertices are named 0, 1, 2, ... n-1.) s
5 101 M
(//) s
5 90 M
(// For an example, consider the following) s
5 79 M
(// 3x4 "grid graph") s
5 68 M
(//) s
5 57 M
(//   \( 0\) -- \( 3\) -- \( 6\) -- \( 9\)) s
5 46 M
(//     |       |       |       |) s
5 35 M
(//   \( 1\) -- \( 4\) -- \( 7\) -- \(10\)) s
5 24 M
(//     |       |       |       |) s
5 13 M
(//   \( 2\) -- \( 5\) -- \( 8\) -- \(11\)) s
5 2 M
(//) s
_R
S
%%Page: (2) 20
%%BeginPageSetup
_S
90 rotate
24 -571 translate
/pagenum 2 def
/fname (search/hw2search.out) def
/fdir (search) def
/ftail (hw2search.out) def
% User defined strings:
/fmodstr (Wed Sep 25 11:41:41 2013) def
/pagenumstr (2) def
/user_header_p false def
/user_footer_p false def
%%EndPageSetup
do_header
5 519 M
(// It would be given by the file) s
5 508 M
(//) s
5 497 M
(// 12) s
5 486 M
(// 2 3 1) s
5 475 M
(// 3 0 4 2) s
5 464 M
(// 2 1 5) s
5 453 M
(// 3 0 4 6) s
5 442 M
(// 4 1 3 5 7) s
5 431 M
(// 3 2 4 8) s
5 420 M
(// 3 3 7 9) s
5 409 M
(// 4 4 6 8 10) s
5 398 M
(// 3 5 7 11) s
5 387 M
(// 2 6 10) s
5 376 M
(// 3 7 9 11) s
5 365 M
(// 2 8 10) s
5 354 M
(//) s
5 343 M
(// For example, in the second line we have) s
5 332 M
(// "2 3 1" because vertex 0 has two neighbors) s
5 321 M
(// vertex 3 and vertex 1.) s
5 310 M
(//) s
5 299 M
(// This function sets the contents of "np" to) s
5 288 M
(// be the number of vertices, and builds an ) s
5 277 M
(// array of edge lists.  Each edge list g[i] ) s
5 266 M
(// an array of integers \(the neighbors of i\)) s
5 255 M
(// terminated with -1.) s
5 244 M
(//) s
5 233 M
(// The edge list is returned by readGraph.) s
5 222 M
(//) s
5 211 M
(int **readGraph\(FILE *f, int *np\) {) s
5 200 M
(  int **graph;) s
5 189 M
(  int e,v;) s
5 178 M
(  int i,j;) s
5 156 M
(  // read the number of vertices) s
5 145 M
(  fscanf\(f,"%d\\n",np\);) s
5 123 M
(  // create the array of edges) s
5 112 M
(  graph = \(int **\)malloc\(\(*np\)*sizeof\(int *\)\);) s
5 90 M
(  // read each adjacency list) s
5 79 M
(  for \(i = 0; i < \(*np\); i++\) {) s
5 68 M
(    // size of the list) s
5 57 M
(    fscanf\(f,"%d",&e\);) s
5 46 M
(    graph[i] = \(int *\)malloc\(\(e+1\)*sizeof\(int\)\);) s
5 35 M
(    // endpoints of edges) s
5 24 M
(    for \(j = 0; j < e; j++\) {) s
5 13 M
(      fscanf\(f,"%d",&graph[i][j]\);) s
5 2 M
(    }) s
_R
S
%%Page: (3) 21
%%BeginPageSetup
_S
90 rotate
24 -571 translate
/pagenum 3 def
/fname (search/hw2search.out) def
/fdir (search) def
/ftail (hw2search.out) def
% User defined strings:
/fmodstr (Wed Sep 25 11:41:41 2013) def
/pagenumstr (3) def
/user_header_p false def
/user_footer_p false def
%%EndPageSetup
do_header
5 519 M
(    graph[i][j] = -1;) s
5 508 M
(  }) s
5 486 M
(  return graph;) s
5 475 M
(}) s
5 453 M
(// bfs) s
5 442 M
(//) s
5 431 M
(// Performs a queue-based breadth-first search of the) s
5 420 M
(// graph provided by the adjacency lists in G.  The) s
5 409 M
(// initial seed vertex is given by "seed".) s
5 398 M
(//) s
5 387 M
(// Returns the distances from the seed verex) s
5 376 M
(// of the BFS tree as an array "dist",) s
5 365 M
(// where dist[i] gives the distance of seed to vertex i.) s
5 354 M
(// These are only valid when dist[i] is non-negative.) s
5 343 M
(// dist[i]=\(-1\) means that i is not) s
5 332 M
(// reachable from seed.  dist[seed] = \(0\).) s
5 321 M
(//) s
5 310 M
(int *bfs\(int seed, int **G, int n\) {) s
5 299 M
(  int u,v,a;) s
5 288 M
(  int *dist;) s
5 277 M
(  queue *Q;) s
5 255 M
(  // clear "from" marks) s
5 244 M
(  dist = \(int *\)malloc\(n * sizeof\(int\)\);) s
5 233 M
(  for \(v = 0; v < n; v++\) {) s
5 222 M
(    dist[v] = -1;) s
5 211 M
(  }) s
5 189 M
(  // initialize DFS stack with seed vertex s) s
5 178 M
(  Q = newQueue\(\);) s
5 167 M
(  enqueue\(seed,Q\);) s
5 156 M
(  dist[seed] = 0;) s
5 145 M
(  /*) s
5 134 M
(   *  for \(v = 0; v < n; v++\) {) s
5 123 M
(   *  printf\("f[%d]:%d\\n",v,dist[v]\);) s
5 112 M
(   *  }) s
5 101 M
(   */) s
5 90 M
(  // search until stack is empty) s
5 79 M
(  while \(!isEmptyQueue\(Q\)\) {) s
5 68 M
(    // grab next vertex to explore from) s
5 57 M
(    u = dequeue\(Q\);) s
5 35 M
(    // for each of u's neighbors v) s
5 24 M
(    for \(a=0; G[u][a] != -1; a++\) {) s
5 2 M
(      v = G[u][a];) s
_R
S
%%Page: (4) 22
%%BeginPageSetup
_S
90 rotate
24 -571 translate
/pagenum 4 def
/fname (search/hw2search.out) def
/fdir (search) def
/ftail (hw2search.out) def
% User defined strings:
/fmodstr (Wed Sep 25 11:41:41 2013) def
/pagenumstr (4) def
/user_header_p false def
/user_footer_p false def
%%EndPageSetup
do_header
5 519 M
(      //printf\("%d>%d\\n",u,v\);) s
5 508 M
(      // if v is not on the queue, mark its "dist" as dist[u] + 1) s
5 497 M
(      if \(dist[v] == -1\) {) s
5 486 M
(        //printf\("%d -> %d\\n",u,v\);) s
5 475 M
(        dist[v] = dist[u] + 1;) s
5 464 M
(        enqueue\(v,Q\);) s
5 453 M
(        outputQueue\(Q\);) s
5 442 M
(      }) s
5 431 M
(    }) s
5 420 M
(  }) s
5 409 M
(  return dist;) s
5 398 M
(}) s
5 376 M
(// dfs) s
5 365 M
(//) s
5 354 M
(// Performs a stack-based depth-first search of the) s
5 343 M
(// graph provided by the adjacency lists in G.  The) s
5 332 M
(// initial seed vertex is given by s.  ) s
5 321 M
(//) s
5 310 M
(// Returns the edges of the DFS tree as an array) s
5 299 M
(// "from", where \(i,from[i]\) gives each edge.  These) s
5 288 M
(// are only valid when from[i] is non-negative and not ) s
5 277 M
(// equal to i.  from[i]=\(-1\) means that i is not) s
5 266 M
(// reachable from s.  from[s] = s.) s
5 255 M
(//) s
5 244 M
(int *dfs\(int s, int **G, int n\) {) s
5 233 M
(  int u,v,a;) s
5 222 M
(  int *from;) s
5 211 M
(  stack *S;) s
5 189 M
(  // clear "from" marks) s
5 178 M
(  from = \(int *\)malloc\(n * sizeof\(int\)\);) s
5 167 M
(  for \(v = 0; v < n; v++\) {) s
5 156 M
(    from[v] = -1;) s
5 145 M
(  }) s
5 123 M
(  // initialize DFS stack with seed vertex s) s
5 112 M
(  S = newStack\(n\);) s
5 101 M
(  push\(s,S\);) s
5 90 M
(  from[s] = s;) s
5 68 M
(//  for \(v = 0; v < n; v++\) {) s
5 57 M
(//    printf\("f[%d]:%d\\n",v,from[v]\);) s
5 46 M
(//  }) s
5 24 M
(  // search until stack is empty) s
5 13 M
(  while \(!isEmpty\(S\)\) {) s
5 2 M
(    // grab next vertex to explore from) s
_R
S
%%Page: (5) 23
%%BeginPageSetup
_S
90 rotate
24 -571 translate
/pagenum 5 def
/fname (search/hw2search.out) def
/fdir (search) def
/ftail (hw2search.out) def
% User defined strings:
/fmodstr (Wed Sep 25 11:41:41 2013) def
/pagenumstr (5) def
/user_header_p false def
/user_footer_p false def
%%EndPageSetup
do_header
5 519 M
(    u = pop\(S\);) s
5 497 M
(    // for each of u's neighbors v) s
5 486 M
(    for \(a=0; G[u][a] != -1; a++\) {) s
5 464 M
(      v = G[u][a];) s
5 453 M
(//      printf\("%d>%d\\n",u,v\);) s
5 442 M
(      // if v is not on the stack, mark its "from" as u) s
5 431 M
(      if \(from[v] == -1\) {) s
5 420 M
(//        printf\("%d -> %d\\n",u,v\);) s
5 409 M
(        from[v] = u;) s
5 398 M
(        push\(v,S\);) s
5 387 M
(        output\(S\);) s
5 376 M
(      }) s
5 365 M
(    }) s
5 354 M
(  }) s
5 343 M
(  return from;) s
5 332 M
(}) s
5 310 M
(// usage) s
5 299 M
(//) s
5 288 M
(// Directs the user of this program.) s
5 277 M
(void usage\(char *cmd, char *fname\) {) s
5 266 M
(  if \(fname\) {) s
5 255 M
(    fprintf\(stderr,"Error! Unable to open file named '%s.'\\n",fname\);) s
5 244 M
(  } else {) s
5 233 M
(    fprintf\(stderr,"Error! Missing input file argument.\\n"\);) s
5 222 M
(  }) s
5 211 M
(  fprintf\(stderr,"usage: %s <graph file>\\n",cmd\);) s
5 200 M
(  fprintf\(stderr,"\\twhere <graph file> is the name of a text file\\n"\);) s
5 189 M
(  fprintf\(stderr,"\\tdescribing the adjacency structure of a graph.\\n"\);) s
5 178 M
(}) s
5 156 M
(//) s
5 145 M
(// graph) s
5 134 M
(//) s
5 123 M
(// Program reads a text file that describes a graph.  It) s
5 112 M
(// then performs a depth-first search of the graph from ) s
5 101 M
(// the graph's 0 vertex, and reports the edges in the ) s
5 90 M
(// DFS tree.) s
5 79 M
(//) s
5 68 M
(int main\(int argc, char **argv\) {) s
5 57 M
(  FILE *gf;) s
5 46 M
(  int **G, n, i, *pred, *other;) s
5 35 M
(  int some = 0;) s
5 13 M
(  if \(argc < 2\) {) s
_R
S
%%Page: (6) 24
%%BeginPageSetup
_S
90 rotate
24 -571 translate
/pagenum 6 def
/fname (search/hw2search.out) def
/fdir (search) def
/ftail (hw2search.out) def
% User defined strings:
/fmodstr (Wed Sep 25 11:41:41 2013) def
/pagenumstr (6) def
/user_header_p false def
/user_footer_p false def
%%EndPageSetup
do_header
5 519 M
(    usage\(argv[0],NULL\);) s
5 508 M
(    return -1;) s
5 486 M
(  } else {) s
5 464 M
(    gf = fopen\(argv[1],"r"\);) s
5 453 M
(    if \(gf == NULL\) {) s
5 442 M
(      usage\(argv[0],argv[1]\);) s
5 431 M
(      return -1;) s
5 420 M
(    }) s
5 398 M
(    // read the graph file) s
5 387 M
(    G = readGraph\(gf,&n\);) s
5 365 M
(    // perform the search) s
5 354 M
(    pred = dfs\(0,G,n\);) s
5 332 M
(    // report the DFS tree) s
5 321 M
(    printf\("{"\);) s
5 310 M
(    for \(i=1; i<n; i++\) {) s
5 299 M
(      if \(pred[i] >= 0\) {) s
5 288 M
(        if \(some\) {) s
5 277 M
(          printf\(","\);) s
5 266 M
(        }) s
5 255 M
(        printf\("\(%d,%d\)",i,pred[i]\);) s
5 244 M
(        some = 1;) s
5 233 M
(      }) s
5 222 M
(    }) s
5 211 M
(    printf\("}\\n"\);) s
5 200 M
(    some = 0;) s
5 189 M
(    // perform the search) s
5 178 M
(    pred = bfs\(0,G,n\);) s
5 156 M
(    // report the BFS frontiers) s
5 145 M
(    printf\("{"\);) s
5 134 M
(    for \(i=1; i<n; i++\) {) s
5 123 M
(      if \(pred[i] >= 0\) {) s
5 112 M
(        if \(some\) {) s
5 101 M
(          printf\(","\);) s
5 90 M
(        }) s
5 79 M
(        printf\("\(%d,%d\)",i,pred[i]\);) s
5 68 M
(        some = 1;) s
5 57 M
(      }) s
5 46 M
(    }) s
5 35 M
(    printf\("}\\n"\);) s
5 13 M
(    return 0;) s
5 2 M
(  }) s
_R
S
%%Page: (7) 25
%%BeginPageSetup
_S
90 rotate
24 -571 translate
/pagenum 7 def
/fname (search/hw2search.out) def
/fdir (search) def
/ftail (hw2search.out) def
% User defined strings:
/fmodstr (Wed Sep 25 11:41:41 2013) def
/pagenumstr (7) def
/user_header_p false def
/user_footer_p false def
%%EndPageSetup
do_header
5 519 M
(}) s
5 508 M
(#ifndef _NODE_H) s
5 497 M
(#define _NODE_H) s
5 475 M
(typedef struct _node {) s
5 464 M
(    int data;) s
5 453 M
(    struct _node *next;) s
5 442 M
(} node;) s
5 420 M
(#endif) s
5 409 M
(#include "node.h") s
5 398 M
(#ifndef _QUEUE_H) s
5 387 M
(#define _QUEUE_H) s
5 365 M
(typedef struct _queue {) s
5 354 M
(    node *head;) s
5 343 M
(    node *tail;) s
5 332 M
(    int size;) s
5 321 M
(} queue;) s
5 299 M
(queue *newQueue\(\);) s
5 288 M
(int isEmptyQueue\(queue *Q\);) s
5 277 M
(int sizeQueue\(queue *Q\);) s
5 266 M
(void enqueue\(int x, queue *Q\);) s
5 255 M
(int dequeue\(queue *Q\);) s
5 244 M
(int front\(queue *Q\);) s
5 233 M
(void outputQueue\(queue *Q\);) s
5 211 M
(#endif) s
5 200 M
(#include <stdio.h>) s
5 189 M
(#include <stdlib.h>) s
5 178 M
(#include "queue.h") s
5 167 M
(#include "node.h") s
5 145 M
(// newQueue) s
5 134 M
(//) s
5 123 M
(// Creates and returns a new queue with the) s
5 112 M
(// given capacity. Its representation is an) s
5 101 M
(// array of integers, potential elements to) s
5 90 M
(// be stored in the stack.  The array item) s
5 79 M
(// at -1 holds the number of elements stored) s
5 68 M
(// on the queue, initially 0.) s
5 57 M
(//) s
5 46 M
(queue *newQueue\(\) {) s
5 35 M
(  queue *Q = \(queue *\)malloc\(sizeof\(queue\)\);) s
5 24 M
(  Q->tail = NULL;) s
5 13 M
(  Q->head = NULL;) s
5 2 M
(  Q->size = 0;) s
_R
S
%%Page: (8) 26
%%BeginPageSetup
_S
90 rotate
24 -571 translate
/pagenum 8 def
/fname (search/hw2search.out) def
/fdir (search) def
/ftail (hw2search.out) def
% User defined strings:
/fmodstr (Wed Sep 25 11:41:41 2013) def
/pagenumstr (8) def
/user_header_p false def
/user_footer_p false def
%%EndPageSetup
do_header
5 519 M
(  return Q;) s
5 508 M
(}) s
5 486 M
(// isEmpty) s
5 475 M
(//) s
5 464 M
(// Checks whether the stack is empty.) s
5 453 M
(int isEmptyQueue\(queue *Q\) {) s
5 442 M
(  return \(sizeQueue\(Q\) == 0\);) s
5 431 M
(}) s
5 409 M
(// size) s
5 398 M
(//) s
5 387 M
(// Returns the number of elements on the stack.) s
5 376 M
(int sizeQueue\(queue *Q\) {) s
5 365 M
(  return Q->size;) s
5 354 M
(}) s
5 332 M
(// increase, decrease) s
5 321 M
(//) s
5 310 M
(// Two stack size helper functions.) s
5 299 M
(void decreaseQ\(queue *Q\) {) s
5 288 M
(  Q->size--;) s
5 277 M
(}) s
5 266 M
(void increaseQ\(queue *Q\) {) s
5 255 M
(  Q->size++;) s
5 244 M
(}) s
5 222 M
(// enqueue) s
5 211 M
(//) s
5 200 M
(// Pushes x onto stack S.) s
5 189 M
(//) s
5 178 M
(void enqueue\(int x, queue* Q\) {) s
5 167 M
(  node *n = \(node *\)malloc\(sizeof\(node\)\);) s
5 156 M
(  n->data = x;) s
5 145 M
(  n->next = NULL;) s
5 134 M
(  if \(Q->head == NULL\) {) s
5 123 M
(    Q->head = n;) s
5 112 M
(  }) s
5 101 M
(  else {) s
5 90 M
(    Q->tail->next = n;) s
5 79 M
(  }) s
5 68 M
(  Q->tail = n;) s
5 57 M
(  increaseQ\(Q\);) s
5 46 M
(}) s
5 13 M
(// dequeue) s
5 2 M
(//) s
_R
S
%%Page: (9) 27
%%BeginPageSetup
_S
90 rotate
24 -571 translate
/pagenum 9 def
/fname (search/hw2search.out) def
/fdir (search) def
/ftail (hw2search.out) def
% User defined strings:
/fmodstr (Wed Sep 25 11:41:41 2013) def
/pagenumstr (9) def
/user_header_p false def
/user_footer_p false def
%%EndPageSetup
do_header
5 519 M
(// Pops top value off of stack S,) s
5 508 M
(// returns it.) s
5 497 M
(//) s
5 486 M
(int dequeue\(queue *Q\) {) s
5 475 M
(  decreaseQ\(Q\);) s
5 464 M
(  int x = Q->head->data;) s
5 453 M
(  node *n = Q->head;) s
5 442 M
(  Q->head = Q->head->next;) s
5 431 M
(  free\(n\);) s
5 420 M
(  return x;) s
5 409 M
(}) s
5 387 M
(// first) s
5 376 M
(//) s
5 365 M
(// Returns top value of stack S.) s
5 354 M
(//) s
5 343 M
(int front\(queue *Q\) {) s
5 332 M
(  if \(Q->head != NULL\) {) s
5 321 M
(    return Q->head->data;) s
5 310 M
(  }) s
5 299 M
(}) s
5 277 M
(void outputQueue\(queue *Q\) {) s
5 266 M
(  int i;) s
5 255 M
(  if \(isEmpty\(Q\)\) {) s
5 244 M
(    printf\("[ ]"\);) s
5 233 M
(  } else {) s
5 222 M
(    node *n = Q->head;) s
5 211 M
(    printf\("[\(%d\)", n->data\);) s
5 200 M
(    n = n->next;) s
5 189 M
(    while \(n != NULL\) {) s
5 178 M
(      printf\(" %d",n->data\);) s
5 167 M
(      n = n->next;) s
5 156 M
(    }) s
5 145 M
(    printf\("]\\n"\);) s
5 134 M
(  }) s
5 123 M
(}) s
5 112 M
(#ifndef _STACK_H) s
5 101 M
(#define _STACK_H) s
5 79 M
(typedef struct _stack {) s
5 68 M
(    int size;) s
5 57 M
(    int capacity;) s
5 46 M
(    int *elements;) s
5 35 M
(} stack;) s
5 13 M
(stack *newStack\(int capacity\);) s
5 2 M
(int isEmpty\(stack *S\);) s
_R
S
%%Page: (10) 28
%%BeginPageSetup
_S
90 rotate
24 -571 translate
/pagenum 10 def
/fname (search/hw2search.out) def
/fdir (search) def
/ftail (hw2search.out) def
% User defined strings:
/fmodstr (Wed Sep 25 11:41:41 2013) def
/pagenumstr (10) def
/user_header_p false def
/user_footer_p false def
%%EndPageSetup
do_header
5 519 M
(int size\(stack *S\);) s
5 508 M
(void push\(int x, stack *S\);) s
5 497 M
(int pop\(stack *S\);) s
5 486 M
(int top\(stack *S\);) s
5 475 M
(void output\(stack *S\);) s
5 453 M
(#endif) s
5 442 M
(#include <stdio.h>) s
5 431 M
(#include <stdlib.h>) s
5 420 M
(#include "stack.h") s
5 398 M
(// newStack) s
5 387 M
(//) s
5 376 M
(// Creates and returns a new stack with the ) s
5 365 M
(// given capacity. Its representation is an) s
5 354 M
(// array of integers, potential elements to) s
5 343 M
(// be stored in the stack.  The array item ) s
5 332 M
(// at -1 holds the number of elements stored) s
5 321 M
(// on the stack, initially 0.) s
5 310 M
(//) s
5 299 M
(stack *newStack\(int capacity\) {) s
5 288 M
(  stack *S = \(stack *\)malloc\(sizeof\(stack\)\);) s
5 277 M
(  S->capacity = capacity;) s
5 266 M
(  S->size = 0;) s
5 255 M
(  S->elements = \(int *\)malloc\(\(capacity\)*sizeof\(int\)\);) s
5 244 M
(  return S;  // start at first element, 0th holds size) s
5 233 M
(}) s
5 211 M
(// isEmpty) s
5 200 M
(//) s
5 189 M
(// Checks whether the stack is empty.) s
5 178 M
(int isEmpty\(stack *S\) {) s
5 167 M
(  return \(size\(S\) == 0\);) s
5 156 M
(}) s
5 134 M
(// size) s
5 123 M
(//) s
5 112 M
(// Returns the number of elements on the stack.) s
5 101 M
(int size\(stack *S\) {) s
5 90 M
(  return S->size;) s
5 79 M
(}) s
5 57 M
(// increase, decrease) s
5 46 M
(//) s
5 35 M
(// Two stack size helper functions.) s
5 24 M
(void decrease\(stack *S\) {) s
5 13 M
(  S->size--;) s
5 2 M
(}) s
_R
S
%%Page: (11) 29
%%BeginPageSetup
_S
90 rotate
24 -571 translate
/pagenum 11 def
/fname (search/hw2search.out) def
/fdir (search) def
/ftail (hw2search.out) def
% User defined strings:
/fmodstr (Wed Sep 25 11:41:41 2013) def
/pagenumstr (11) def
/user_header_p false def
/user_footer_p false def
%%EndPageSetup
do_header
5 519 M
(void increase\(stack *S\) {) s
5 508 M
(  S->size++;) s
5 497 M
(}) s
5 475 M
(// push) s
5 464 M
(//) s
5 453 M
(// Pushes x onto stack S.) s
5 442 M
(//) s
5 431 M
(void push\(int x, stack *S\) {) s
5 420 M
(  S->elements[size\(S\)] = x;) s
5 409 M
(  increase\(S\);) s
5 398 M
(}) s
5 365 M
(// pop) s
5 354 M
(//) s
5 343 M
(// Pops top value off of stack S,) s
5 332 M
(// returns it.) s
5 321 M
(//) s
5 310 M
(int pop\(stack *S\) {) s
5 299 M
(  decrease\(S\);) s
5 288 M
(  return S->elements[size\(S\)];) s
5 277 M
(}) s
5 255 M
(// top) s
5 244 M
(//) s
5 233 M
(// Returns top value of stack S.) s
5 222 M
(//) s
5 211 M
(int top\(stack *S\) {) s
5 200 M
(  return S->elements[size\(S\)-1];) s
5 189 M
(}) s
5 167 M
(void output\(stack *S\) {) s
5 156 M
(  int i;) s
5 145 M
(  if \(isEmpty\(S\)\) {) s
5 134 M
(    printf\("[ ]"\);) s
5 123 M
(  } else {) s
5 112 M
(    printf\("["\);) s
5 101 M
(    for \(i=0; i<size\(S\)-1; i++\) {) s
5 90 M
(      printf\("%d ",S->elements[i]\);) s
5 79 M
(    }) s
5 68 M
(    printf\("\(%d\)]\\n",top\(S\)\);) s
5 57 M
(  }) s
5 46 M
(}) s
5 35 M
([\(3\)]) s
5 24 M
([3 \(1\)]) s
5 13 M
([3 \(4\)]) s
5 2 M
([3 4 \(2\)]) s
_R
S
%%Page: (12) 30
%%BeginPageSetup
_S
90 rotate
24 -571 translate
/pagenum 12 def
/fname (search/hw2search.out) def
/fdir (search) def
/ftail (hw2search.out) def
% User defined strings:
/fmodstr (Wed Sep 25 11:41:41 2013) def
/pagenumstr (12) def
/user_header_p false def
/user_footer_p false def
%%EndPageSetup
do_header
5 519 M
([3 4 \(5\)]) s
5 508 M
([3 4 \(8\)]) s
5 497 M
([3 4 \(7\)]) s
5 486 M
([3 4 7 \(11\)]) s
5 475 M
([3 4 7 \(10\)]) s
5 464 M
([3 4 7 \(9\)]) s
5 453 M
([3 4 7 \(6\)]) s
5 442 M
({\(1,0\),\(2,1\),\(3,0\),\(4,1\),\(5,2\),\(6,9\),\(7,8\),\(8,5\),\(9,10\),\(10,11\),\(11,8\)}) s
5 431 M
([\(3\)]) s
5 420 M
([\(3\) 1]) s
5 409 M
([\(1\) 4]) s
5 398 M
([\(1\) 4 6]) s
5 387 M
([\(4\) 6 2]) s
5 376 M
([\(6\) 2 5]) s
5 365 M
([\(6\) 2 5 7]) s
5 354 M
([\(2\) 5 7 9]) s
5 343 M
([\(7\) 9 8]) s
5 332 M
([\(9\) 8 10]) s
5 321 M
([\(10\) 11]) s
5 310 M
({\(1,1\),\(2,2\),\(3,1\),\(4,2\),\(5,3\),\(6,2\),\(7,3\),\(8,4\),\(9,3\),\(10,4\),\(11,5\)}) s
_R
S
%%Trailer
%%Pages: 30
%%DocumentNeededResources: font Courier-Bold Courier 
%%EOF
